#+TITLE: GPG
#+AUTHOR: Hippie Hacker
#+EMAIL: hh@ii.coop
#+CREATOR: ii.coop
#+DATE: 17th of January, 2019
#+PROPERTY: header-args:shell :results output code verbatim replace
#+PROPERTY: header-args:shell+ :dir (symbol-value 'org-file-dir)
#+PROPERTY: header-args:tmate  :socket (symbol-value 'socket)
#+PROPERTY: header-args:tmate+ :session (concat (user-login-name) ":" (nth 4 (org-heading-components)))
#+PROPERTY: header-args:tmate+ :prologue (concat "cd " org-file-dir "\n") 
#+STARTUP: showeverything

* Install GPG
 
Be sure to install gnugp and start with a fresh ~/.gnupg dir
 
#+BEGIN_SRC tmate
  sudo apt install -y gnupg
  mkdir -p ~/.gnupg
  killall gpg-agent
  mv ~/.gnupg $HOME/.gnupg-`date +%Y-%m-%d-%H:%M`
#+END_SRC

#+BEGIN_SRC shell
 gpg --version | grep -A1 algorithms: 
#+END_SRC

#+RESULTS:
#+BEGIN_SRC shell
Supported algorithms:
Pubkey: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
#+END_SRC

#+BEGIN_SRC tmate
#export GNUPGHOME="$(mktemp -d)"
export GNUPGHOME="$HOME/.gnupg"
cat >newkey.conf <<EOF
     %echo Generating a basic OpenPGP key
     Key-Type: RSA
     Key-Length: 4096
     Subkey-Type: ELG-E
     Subkey-Length: 1024
     Name-Real: Hippie Hacker
     Name-Comment: http://ii.coop
     Name-Email: hh@ii.coop
     Expire-Date: 0
     Passphrase: changeme
     # Do a commit here, so that we can later print "done" :-)
     %commit
     %echo done
EOF
gpg --batch --generate-key newkey.conf
gpg --list-secret-keys
#+END_SRC

While the above is runnig you'll need some entropy, may create a tar in /dev/shm from /usr

#+BEGIN_EXAMPLE
tar -cvf /dev/shm/deleteme /usr
#Control C a bit later when your key is created
#+END_EXAMPLE

#+BEGIN_SRC shell
gpg --list-keys
#+END_SRC

#+RESULTS:
#+BEGIN_SRC shell
/home/hh/.gnupg/pubring.kbx
---------------------------
pub   rsa4096 2019-01-28 [SCEA]
      AE7C6FC3FA94FDB667A92260C27BD0BC28371FF9
uid           [ultimate] Hippie Hacker (http://ii.coop) <hh@ii.coop>
sub   elg1024 2019-01-28 [E]

#+END_SRC

* Footer
# Local Variables:
# eval: (set (make-local-variable 'org-file-dir) (file-name-directory buffer-file-name))
# eval: (set (make-local-variable 'user-buffer) (concat user-login-name "." (file-name-base buffer-file-name)))
# eval: (set (make-local-variable 'socket) (concat "/tmp/" user-buffer ".iisocket"))
# eval: (set (make-local-variable 'select-enable-clipboard) t)
# eval: (set (make-local-variable 'select-enable-primary) t)
# eval: (set (make-local-variable 'start-tmate-command) (concat "tmate -S " socket " new-session -A -s " user-login-name " -n main \"tmate wait tmate-ready && tmate display -p '#{tmate_ssh}' | xclip -i -sel p -f | xclip -i -sel c; bash --login\""))
# eval: (xclip-mode 1) 
# eval: (gui-select-text start-tmate-command)
# org-babel-tmate-session-prefix: ""
# org-babel-tmate-default-window-name: "main"
# org-use-property-inheritance: t
# End:
