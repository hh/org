#+TITLE: registry.k8.io Envoy In K8s

Set up Envoy to rewrite the requests, 302'ing the hostname and path to a registry that's chosen by an external service.

* Setting up an authority for the host
A simple webserver to dictate the host that Envoy will rewrite requests to, based on the source IP.

#+BEGIN_SRC shell :results silent
mkdir reg-host-authority
#+END_SRC

#+BEGIN_SRC go :tangle ./reg-host-authority/main.go
package main

import (
  "log"
  "net/http"
  "time"
  "os"

  "github.com/gorilla/mux"
)

// logging ...
// basic request logging middleware
func logging(next http.Handler) http.Handler {
  // log all requests
  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
    log.Printf("%v %v %v %v %v/%v", r.Method, r.URL, r.Proto, r.Response, r.RemoteAddr, r.Header.Get("X-Real-Ip"))
    next.ServeHTTP(w, r)
  })
}

func decideHost(sourceIP string) string {
  // get asns (a large list)
  // use a BGP library to map out the route
  // use sourceIP to find the closest
    if sourceIP == os.Getenv("LOCAL_IP") {
      return "registry-1.docker.io"
    }
    return "k8s.gcr.io"
}

// getRoot ...
// get root of API
func getRoot(w http.ResponseWriter, r *http.Request) {
  host := decideHost(r.Header.Get("X-Real-Ip"))
  log.Println(host)
  w.WriteHeader(200)
  w.Write([]byte(host))
}

func main() {
  // bring up the API
  port := ":8080"
  router := mux.NewRouter()

  router.HandleFunc("/", getRoot)
  router.Use(logging)

  srv := &http.Server{
    Handler:      router,
    Addr:         port,
    WriteTimeout: 15 * time.Second,
    ReadTimeout:  15 * time.Second,
  }
  log.Println("Listening on", port)
  log.Fatal(srv.ListenAndServe())
}
#+END_SRC

#+BEGIN_SRC shell :dir ./reg-host-authority :results silent
go mod init reg-host-authority
#+END_SRC

#+BEGIN_SRC shell :dir ./reg-host-authority :results silent
go get ./...
#+END_SRC

#+BEGIN_SRC tmate :dir ./reg-host-authority :results silent :window reg-host-authority
go run .
#+END_SRC

* Deploying Envoy
** Envoy configuration

#+BEGIN_SRC yaml :tangle ./envoy-config.yaml
static_resources:
  listeners:
  - name: main
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 10000
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: ingress_http
          codec_type: auto
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains:
              - "*"
              routes:
              - match:
                  prefix: "/"
                route:
                  cluster: web_service
          http_filters:
          - name: envoy.filters.http.lua
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
              inline_code: |
                function envoy_on_request(request_handle)
                  remoteAddr = request_handle:headers():get("x-real-ip")
                  local headers, body = request_handle:httpCall(
                  "humacs",
                  {
                    [":method"] = "GET",
                    [":path"] = "/",
                    [":authority"] = "humacs",
                    ["X-Real-Ip"] = remoteAddr
                  },
                  remoteAddr,
                  5000
                  )
                  reg = body
                  if request_handle:headers():get(":method") == "GET" then
                    request_handle:respond(
                      {
                        [":status"] = "302",
                        ["location"] = "https://"..reg..request_handle:headers():get(":path"),
                        ["Content-Type"] = "text/html; charset=utf-8",
                        [":authority"] = "web_service"
                      },
                      '<a href="'.."https://"..reg..request_handle:headers():get(":path")..'">'.."302".."</a>.\n")
                  end
                end
          - name: envoy.filters.http.router
            typed_config: {}

  clusters:
  - name: web_service
    connect_timeout: 0.25s
    type: LOGICAL_DNS
    lb_policy: round_robin
    load_assignment:
      cluster_name: web_service
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: k8s.io
                port_value: 443
  - name: humacs
    connect_timeout: 0.25s
    type: LOGICAL_DNS
    lb_policy: round_robin
    load_assignment:
      cluster_name: humacs
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: humacs-reg-host-author-8080
                port_value: 8080
#+END_SRC

#+BEGIN_SRC shell :results silent
kubectl create configmap envoy-config --from-file=envoy\.yaml=envoy-config.yaml --dry-run=client -o yaml | kubectl apply -f -
#+END_SRC

** Deploying Envoy
#+BEGIN_SRC yaml :tangle ./envoy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    lastcfg: |
      ${ENVOY_LAST_CFG}
  labels:
    app: registry-k8s-io-envoy
  name: registry-k8s-io-envoy
spec:
  replicas: 3
  selector:
    matchLabels:
      app: registry-k8s-io-envoy
  template:
    metadata:
      annotations:
        lastcfg: |
          ${ENVOY_LAST_CFG}
      labels:
        app: registry-k8s-io-envoy
    spec:
      containers:
      - name: envoy
        args:
        - -c
        - /etc/envoy/envoy.yaml
        image: envoyproxy/envoy-distroless:v1.20.0
        volumeMounts:
          - name: config
            mountPath: /etc/envoy/envoy.yaml
            subPath: envoy.yaml
        ports:
          - name: http
            containerPort: 10000
      volumes:
      - name: config
        configMap:
          name: envoy-config
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: registry-k8s-io-envoy
  name: registry-k8s-io-envoy
spec:
  ports:
  - name: registry-k8s-io
    port: 10000
    protocol: TCP
    targetPort: 10000
  selector:
    app: registry-k8s-io-envoy
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: registry-k8s-io-envoy
spec:
  rules:
  - host: registry-k8s-io.${SHARINGIO_PAIR_BASE_DNS_NAME}
    http:
      paths:
      - backend:
          service:
            name: registry-k8s-io-envoy
            port:
              number: 10000
        path: /
        pathType: ImplementationSpecific
  tls:
  - hosts:
    - registry-k8s-io.${SHARINGIO_PAIR_BASE_DNS_NAME}
    secretName: letsencrypt-prod
#+END_SRC

#+BEGIN_SRC shell :results silent
export ENVOY_LAST_CFG=$(cat envoy-config.yaml | sha256sum)
envsubst < envoy.yaml | kubectl apply -f -
#+END_SRC

#+BEGIN_SRC shell :results silent
kubectl delete -f envoy.yaml
#+END_SRC
