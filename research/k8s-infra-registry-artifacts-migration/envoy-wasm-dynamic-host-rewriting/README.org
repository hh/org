#+TITLE: Envoy WASM dynamic host rewriting

#+begin_quote
Rewrite the location header with Envoy, written in Golang and compiled as WASM
#+end_quote

* The code
#+begin_src go :tangle main.go
package main

import (
	"fmt"
	"os"

	"github.com/tetratelabs/proxy-wasm-go-sdk/proxywasm"
	"github.com/tetratelabs/proxy-wasm-go-sdk/proxywasm/types"
)

const (
	realIPKey    = "x-real-ip"
	matchIPKey   = "MATCH_IP"
	locationKey  = "location"
	authorityKey = ":authority"
	statusKey    = ":status"
	pathKey      = ":path"
	statusCode   = 302
	defaultHost  = "k8s.gcr.io"
	rewriteHost  = "registry-1.docker.io"
)

var (
	authority = os.Getenv("AUTHORITY")
	matchIP   = os.Getenv(matchIPKey)
)

func main() {
	proxywasm.SetVMContext(&vmContext{})
}

type vmContext struct {
	// Embed the default VM context here,
	// so that we don't need to reimplement all the methods.
	types.DefaultVMContext
}

// Override types.DefaultVMContext.
func (*vmContext) NewPluginContext(contextID uint32) types.PluginContext {
	return &pluginContext{}
}

type pluginContext struct {
	// Embed the default plugin context here,
	// so that we don't need to reimplement all the methods.
	types.DefaultPluginContext
}

// Override types.DefaultPluginContext.
func (*pluginContext) NewHttpContext(contextID uint32) types.HttpContext {
	return &httpRouting{}
}

type httpRouting struct {
	// Embed the default http context here,
	// so that we don't need to reimplement all the methods.
	types.DefaultHttpContext
	bodySize    int
	endOfStream bool
}

func (ctx *pluginContext) OnPluginStart(pluginConfigurationSize int) types.OnPluginStartStatus {
	return types.OnPluginStartStatusOK
}

// Override types.DefaultHttpContext.
func (ctx *httpRouting) OnHttpRequestHeaders(numHeaders int, endOfStream bool) types.Action {
	host := defaultHost
	remoteAddr, err := proxywasm.GetHttpRequestHeader(realIPKey)
	if err != nil {
		proxywasm.LogCritical(fmt.Sprintf("Error: getting request header: '%v'", realIPKey))
	}
	if matchIP == remoteAddr {
		host = rewriteHost
	}

	path, _ := proxywasm.GetHttpRequestHeader(pathKey)
	body := fmt.Sprintf(`<a href="https://%v%v">%v</a>.`, host, path, statusCode)
	if err := proxywasm.SendHttpResponse(statusCode, [][2]string{
		{authorityKey, authority},
		{locationKey, fmt.Sprintf("https://%v%v", host, path)},
		{statusKey, fmt.Sprintf("%s", statusCode)},
		{pathKey, path},
	}, []byte(body)); err != nil {
		proxywasm.LogErrorf("Error: sending http response: %v", err)
		proxywasm.ResumeHttpRequest()
	}
	return types.ActionPause
}

func (ctx *pluginContext) OnTick() {}
#+end_src

Compile with tinygo
#+begin_src tmate :window build-wasm :prologue "docker run --rm --user $(id -u):$(id -g) --tmpfs /.cache --tmpfs /go -v $(pwd):$(pwd) --workdir=$(pwd) tinygo/tinygo:0.20.0 \\"
tinygo build -o wasm.wasm -scheduler=none -target=wasi .
#+end_src

* Configure
#+begin_src yaml :tangle ./envoy-config.yaml
static_resources:
  listeners:
  - name: main
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 10000
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: ingress_http
          codec_type: auto
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains:
              - "*"
              routes:
              - match:
                  prefix: "/"
                route:
                  cluster: web_service
          http_filters:
          - name: envoy.filters.http.wasm
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm
              config:
                name: "wasm"
                root_id: "wasm_root"
                configuration:
                  "@type": "type.googleapis.com/google.protobuf.StringValue"
                  value: |
                    {
                    }
                vm_config:
                  runtime: "envoy.wasm.runtime.v8"
                  vm_id: "wasm_vm"
                  code:
                    local:
                      filename: "/etc/envoy/wasm.wasm"
                  environment_variables:
                    host_env_keys:
                      - MATCH_IP
                    key_values:
                      AUTHORITY: web_service
          - name: envoy.filters.http.router
            typed_config: {}
  clusters:
  - name: web_service
    connect_timeout: 0.25s
    type: LOGICAL_DNS
    lb_policy: round_robin
    load_assignment:
      cluster_name: web_service
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: k8s.io
                port_value: 443
#+end_src

* Testing in Docker
#+begin_src tmate :window envoy
docker \
    run \
    -it \
    --rm \
    -p 10000:10000 \
    -v $PWD/envoy-config.yaml:/etc/envoy/envoy.yaml \
    -v $PWD/wasm.wasm:/etc/envoy/wasm.wasm \
    -e MATCH_IP="$(kubectl -n "${SHARINGIO_PAIR_NAME}" get pod "${SHARINGIO_PAIR_NAME}-humacs-0" -o=jsonpath='{.status.podIP}')" \
    envoyproxy/envoy-distroless:v1.20.0 \
    -c /etc/envoy/envoy.yaml
#+end_src

* Deploying in Kubernetes
Create container image
#+begin_src dockerfile :tangle Dockerfile
FROM tinygo/tinygo:0.20.0 AS build
WORKDIR /app
COPY go.* *.go /app/
RUN tinygo build -o wasm.wasm -scheduler=none -target=wasi /app/main.go

FROM envoyproxy/envoy-distroless:v1.20.0
COPY --from=build /app/wasm.wasm /etc/envoy/wasm.wasm
#+end_src

Build the container image
#+begin_src tmate :window build-wasm
docker build -t envoy-with-registry-k8s-io-wasm .
#+end_src

Push the image out to the other nodes
#+begin_src shell
for NODE_IP in $(kubectl get nodes -l node-role.kubernetes.io/control-plane!='' -o=jsonpath='{.items[*].status.addresses[?(@.type=="InternalIP")].address}'); do
    printf "${NODE_IP} :: "
    docker save envoy-with-registry-k8s-io-wasm:latest | ssh "root@${NODE_IP}" docker load
done
#+end_src

Create a namespace
#+begin_src shell
kubectl create namespace k8s-reg-envoy-wasm -o yaml --dry-run=client | \
    kubectl apply -f -
kubectl label namespace k8s-reg-envoy-wasm cert-manager-tls=sync --overwrite
#+end_src

#+RESULTS:
#+begin_example
namespace/k8s-reg-envoy-wasm created
namespace/k8s-reg-envoy-wasm labeled
#+end_example

Create a ConfigMap for the config
#+BEGIN_SRC shell :results silent
kubectl -n k8s-reg-envoy-wasm create configmap config --from-file=envoy\.yaml=./envoy-config.yaml --dry-run=client -o yaml | kubectl apply -f -
#+END_SRC

Configuring Envoy
#+BEGIN_SRC yaml :tangle ./envoy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    lastcfg: |
      ${ENVOY_LAST_CFG}
  labels:
    app: k8s-reg-envoy-wasm
  name: k8s-reg-envoy-wasm
spec:
  replicas: 10
  selector:
    matchLabels:
      app: k8s-reg-envoy-wasm
  template:
    metadata:
      annotations:
        lastcfg: |
          ${ENVOY_LAST_CFG}
      labels:
        app: k8s-reg-envoy-wasm
    spec:
      containers:
      - name: envoy
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
        env:
          - name: MATCH_IP
            value: ${MATCH_IP}
        args:
        - -c
        - /etc/envoy/envoy.yaml
        image: envoy-with-registry-k8s-io-wasm:latest
        imagePullPolicy: Never
        volumeMounts:
          - name: config
            mountPath: /etc/envoy/envoy.yaml
            subPath: envoy.yaml
        ports:
          - name: http
            containerPort: 10000
      volumes:
      - name: config
        configMap:
          name: config
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: k8s-reg-envoy-wasm
  name: k8s-reg-envoy-wasm
spec:
  ports:
  - name: wasm
    port: 10000
    protocol: TCP
    targetPort: 10000
  selector:
    app: k8s-reg-envoy-wasm
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: k8s-reg-envoy-wasm
spec:
  rules:
  - host: k8s-reg-envoy-wasm.${SHARINGIO_PAIR_BASE_DNS_NAME}
    http:
      paths:
      - backend:
          service:
            name: k8s-reg-envoy-wasm
            port:
              number: 10000
        path: /
        pathType: ImplementationSpecific
  tls:
  - hosts:
    - k8s-reg-envoy-wasm.${SHARINGIO_PAIR_BASE_DNS_NAME}
    secretName: letsencrypt-prod
#+END_SRC

#+BEGIN_SRC shell :results silent
export \
    ENVOY_LAST_CFG=$(cat Dockerfile main.go envoy-config.yaml wasm.wasm | sha256sum) \
    MATCH_IP="$(kubectl -n "${SHARINGIO_PAIR_NAME}" get pod "${SHARINGIO_PAIR_NAME}-humacs-0" -o=jsonpath='{.status.podIP}')"
envsubst < envoy.yaml | kubectl -n k8s-reg-envoy-wasm apply -f -
#+END_SRC

* Notes and references
- https://tufin.medium.com/extending-envoy-proxy-with-golang-webassembly-e51202809ba6
- https://github.com/mstrYoda/envoy-proxy-wasm-filter-golang/blob/master/main.go
- https://github.com/tetratelabs/proxy-wasm-go-sdk/blob/main/examples/http_routing/main.go
