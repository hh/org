#+TITLE: Container Image Hash To Tag

* Install dependencies
#+BEGIN_SRC shell :results silent
go install github.com/google/go-containerregistry/cmd/gcrane@latest
sudo apt install parallel -y
#+END_SRC

* Authentication
#+BEGIN_SRC tmate :window gcloud-setup
gcloud auth login
#+END_SRC

#+BEGIN_SRC tmate :window gcloud-setup
gcloud auth application-default login
#+END_SRC

#+BEGIN_SRC tmate :window gcloud-setup
gcloud config set project k8s-infra-ii-sandbox
#+END_SRC

* Investigating the data
#+BEGIN_SRC sql-mode :product bq
SELECT resource, hash_no FROM k8s_artifacts_gcslogs_appspot.resource_and_hash_distinct_list LIMIT 1;
#+END_SRC

#+RESULTS:
#+begin_SRC example
+----------+------------------------------------------------------------------+
| resource |                             hash_no                              |
+----------+------------------------------------------------------------------+
| pause    | 2a060e2e7101d419352bf82c613158587400be743482d9a537ec4a9d1b4eb93c |
+----------+------------------------------------------------------------------+
#+end_SRC

* Dumping the data
#+BEGIN_SRC shell :results silent
bq extract --destination_format NEWLINE_DELIMITED_JSON k8s_artifacts_gcslogs_appspot.resource_and_hash_distinct_list gs://ii_bq_scratch_dump/resource_and_hash_distinct_list.json
#+END_SRC

#+BEGIN_SRC shell :results silent
gsutil cp gs://ii_bq_scratch_dump/resource_and_hash_distinct_list.json /tmp/resource_and_hash_distinct_list.json
#+END_SRC

* Understanding the data
#+BEGIN_SRC shell
cat /tmp/resource_and_hash_distinct_list.json | jq -s .[0]
#+END_SRC

#+RESULTS:
#+begin_example
{
  "cs_referer": "https://k8s.gcr.io/v2/pause/blobs/sha256:2a060e2e7101d419352bf82c613158587400be743482d9a537ec4a9d1b4eb93c",
  "resource": [
    "pause"
  ],
  "hash_no": [
    "2a060e2e7101d419352bf82c613158587400be743482d9a537ec4a9d1b4eb93c"
  ]
}
#+end_example

* Getting the tags from the hashes
** Checkout stp's layerMapper branch of k8s.io
#+BEGIN_SRC shell
cd ~/kubernetes/k8s.io
git remote add stp-ip https://github.com/stp-ip/k8s.io
git fetch stp-ip
git checkout layerMapper
#+END_SRC

#+RESULTS:
#+begin_example
Branch 'layerMapper' set up to track remote branch 'layerMapper' from 'stp-ip'.
#+end_example

** Running the first hash number
#+BEGIN_SRC shell
HASH=$(cat /tmp/resource_and_hash_distinct_list.json | jq -s -r .[0].hash_no[0])
cd ~/kubernetes/k8s.io/metrics/access-logs/poc-layer-mapper
bash ./matcher.sh $HASH
#+END_SRC

#+RESULTS:
#+begin_example
====
Layer:2a060e2e7101d419352bf82c613158587400be743482d9a537ec4a9d1b4eb93c
Repos
  kubernetes/pause-arm64
  pause-arm64

Tags
  kubernetes/pause-arm64:3.2/amd64
  pause-arm64:3.2/amd64

#+end_example

** Generating JSON v1
#+BEGIN_SRC shell :tangle /tmp/sort_resource_and_hash_distinct_list.sh
cd ~/kubernetes/k8s.io/metrics/access-logs/poc-layer-mapper
BASE="us.gcr.io/k8s-artifacts-prod/"
(
  for ARG in $(cat /tmp/resource_and_hash_distinct_list.json | jq -s -r '.[].hash_no[0]'); do
      declare -a MATCH_TAG=()
      MATCH_TAG+=$(find tags -type f | cut -d "/" -f2- <<< $(parallel -k -j1000% -n 1000 -m grep -H -l -m1 $ARG {}))
      IFS=$'\n' MATCH_TAG_SORTED=($(sort <<<"${MATCH_TAG[*]}"))
      unset IFS
      declare -a TAGS=()
      for V in "${MATCH_TAG_SORTED[@]}"
      do
         V=${V//\_/\/}
         V=${V#"$BASE"}
         TAGS+="$V "
      done
      jq -n '{hash: $ARGS.named["hash"], tags: $ARGS.positional}' --arg hash "$ARG" --args ${TAGS[*]}
done
) > /tmp/sorted_resource_and_hash_distinct_list.json
#+END_SRC

Running the script
#+BEGIN_SRC tmate :window sort-resource-distinct
bash /tmp/sort_resource_and_hash_distinct_list.sh
#+END_SRC

Too inefficent and slow.

** Generating JSON v2
#+BEGIN_SRC shell :tangle /tmp/sort_resource_and_hash_distinct_list_v2.sh
cd ~/kubernetes/k8s.io/metrics/access-logs/poc-layer-mapper
BASE="us.gcr.io/k8s-artifacts-prod/"
HASHES=$(cat /tmp/resource_and_hash_distinct_list.json | jq -s -r '.[].hash_no[0]')
function resource_to_tag {
      ARG=$1
      declare -a MATCH_TAG=()
      MATCH_TAG+=$(find tags -type f | cut -d "/" -f2- <<< $(parallel -k -j1000% -n 1000 -m grep -H -l -m1 $ARG {}))
      IFS=$'\n' MATCH_TAG_SORTED=($(sort <<<"${MATCH_TAG[*]}"))
      unset IFS
      declare -a TAGS=()
      for V in "${MATCH_TAG_SORTED[@]}"
      do
         V=${V//\_/\/}
         V=${V#"$BASE"}
         TAGS+="$V "
      done
      jq -n '{hash: $ARGS.named["hash"], tags: $ARGS.positional}' --arg hash "$ARG" --args ${TAGS[*]}
}
export -f resource_to_tag

for HASH in $HASHES; do
   echo $HASH | parallel -k -j1000% -n 1000 -m resource_to_tag $HASH {}
done
#+END_SRC

Running the script
#+BEGIN_SRC tmate :window sort-resource-distinct-v2
bash /tmp/sort_resource_and_hash_distinct_list_v2.sh
#+END_SRC

This doesn't work.

** Loading the tags into BigQuery

#+BEGIN_SRC tmate :window load-into-bq
cd ~/kubernetes/k8s.io/metrics/access-logs/poc-layer-mapper/tags
for FILENAME in *; do
    FILENAME_CLEAN=$(echo $FILENAME | sed 's/_/\//g')
    IMAGE=$(echo $FILENAME_CLEAN | cut -d ':' -f1)
    TAG=$(echo $FILENAME_CLEAN | cut -d ':' -f2)
    echo "image,tag,hash" > /tmp/image-tag-hash.csv
    cat $FILENAME | jq -r '(.config.digest |= split(":")[1]) | [$ARGS.named["image"], $ARGS.named["tag"], .config.digest] | @csv' --arg image "$IMAGE" --arg tag "$TAG" | tee -a /tmp/image-tag-hash.csv
done
#+END_SRC

Clean up
#+BEGIN_SRC shell :results silent
rm /tmp/image-tag-hash.csv
#+END_SRC

Upload to bucket
#+BEGIN_SRC shell :results silent
gsutil cp /tmp/image-tag-hash.csv gs://ii_bq_scratch_dump/image-tag-hash.csv
#+END_SRC

Load into BigQuery
#+BEGIN_SRC shell :results silent
bq load --autodetect --source_format=CSV k8s_artifacts_gcslogs_appspot.image_tag_hash gs://ii_bq_scratch_dump/image-tag-hash.csv image:string,tag:string,hash:string
#+END_SRC

** Parallel version
#+BEGIN_SRC tmate :window load-into-bq2
cd ~/kubernetes/k8s.io/metrics/access-logs/poc-layer-mapper/tags
FILENAME_CLEAN=$(echo $FILENAME | sed 's/_/\//g')
IMAGE=$(echo $FILENAME_CLEAN | cut -d ':' -f1)
TAG=$(echo $FILENAME_CLEAN | cut -d ':' -f2)
find . -type f -print | tr -d './' | head -n 5 | parallel jq -r '(.config.digest |= split(":")[1]) | ($ARGS.named["filename"] | split(":")[0]) as $image | ($ARGS.named["filename"] | split(":")[1]) as $tag | [$image, $tag, .config.digest] | @csv' --arg filename {}
#+END_SRC
