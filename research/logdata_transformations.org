#+TITLE: Big Query Scratch
Goal is a file that will be easy starting place for bq work
* Log in to gcloud
Login to gcloud
#+BEGIN_SRC tmate :window prepare
gcloud auth login
#+END_SRC
Set the project
#+BEGIN_SRC tmate :window prepare
gcloud config set project k8s-infra-ii-sandbox
#+END_SRC
* Make sure we are in the right project in bq
#+BEGIN_SRC tmate :window prepare
bq ls
#+END_SRC

* Data transformation of log data

**** Goal:
create a `usage_all` table that include all `usage_all` columns plus new culomns for ASN, ASN Company name. Where the ASN exist in https://github.com/kubernetes/k8s.io/tree/main/registry.k8s.io/infra/meta/asns the Company name should be replaced by the name in the `.yaml` file. This is to support the sorting of the ASN companies with `.yaml` file into one group in Data Studio.
***** Sub goal:
Add a column for image_name with regex 'REGEXP_EXTRACT(cs_referer,'^https://(?:[^/]+)/+v2/(?:k8s-artifacts-prod/+)*([a-z0-9-/]+)/blobs/sha256:(?:[a-f0-9]+)')' This is however not critical and would be easy to achive in Data Studio


*** 1. Output to a table - Find distinct IPs from `usage_all` data
Extracting dictinct IPs addresses from the 'usage_all' table.
A count of the number of  logs per IPs is also added, this is not used late on and is done for interist sake.
Currently using `bb_test.usage_all` table. Must be change when automated 'usage' table is avalible

#+BEGIN_SRC tmate :window prepare
bq query --nouse_legacy_sql --destination_table riaan_data_store.1_etl_test_distinct_ip_org  'SELECT DISTINCT c_ip, COUNT(c_ip) AS Total_Count FROM `k8s-infra-ii-sandbox.k8s_artifacts_dataset_bb_test.usage_all` GROUP BY c_ip ORDER BY Total_Count DESC'
#+END_SRC



*** 2. Output to a table - Change distinct IP to int.
To be able to lookup asn data the list of distinct IPs is converted to integers.

#+BEGIN_SRC tmate :window prepare
bq query --nouse_legacy_sql --destination_table riaan_data_store.2_etl_test_distinct_ip_and_int_org  'SELECT *, NET.IPV4_TO_INT64(NET.IP_FROM_STRING(c_ip)) AS c_ip_int FROM `k8s-infra-ii-sandbox.riaan_data_store.1_etl_test_distinct_ip_org` WHERE REGEXP_CONTAINS(c_ip, r"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}")'
#+END_SRC



*** 3. Output to a table - Join potaroo data with .yaml names
To be able to  group the companies with .yaml files in the K8s/infra/meta/asn folder, the names are added to the potaroo table in a new column.
Using `etl_script_generated_set_riaan.potaroo_all_asn_name` must be move to `etl_script_generated_set.potaroo_all_asn_name` when it is avalible.



#+BEGIN_SRC tmate :window prepare
bq query --nouse_legacy_sql --destination_table riaan_data_store.3_etl_test_potaroo_with_yaml_names_org  'SELECT asn, companyname, name_yaml FROM ( SELECT    asn, companyname FROM `k8s-infra-ii-sandbox.etl_script_generated_set_riaan.potaroo_all_asn_name`) A LEFT OUTER JOIN ( SELECT asn_yaml, name_yaml FROM `k8s-infra-ii-sandbox.etl_staging.k8s_repo_yaml_20210609`) B ON A.asn=B.asn_yaml'
#+END_SRC



*** 4. Output to a table - Join potaroo and yaml name in to one column
This step join the potaroo company name table and the .yaml name table into a single column.
With more advance SQL-foo it could be combined with the previous step.

#+BEGIN_SRC tmate :window prepare
bq query --nouse_legacy_sql --destination_table riaan_data_store.4_etl_test_potaroo_with_yaml_names_in_one_column_org  'SELECT A.asn, A.companyname, case when name_yaml is not null then name_yaml  else B.companyname end as name_with_yaml_name FROM ( SELECT asn, companyname FROM `k8s-infra-ii-sandbox.riaan_data_store.3_etl_test_potaroo_with_yaml_names_org`) A LEFT JOIN ( SELECT asn, companyname, name_yaml FROM `k8s-infra-ii-sandbox.riaan_data_store.3_etl_test_potaroo_with_yaml_names_org`) B ON A.asn=B.asn'
#+END_SRC



*** 5. Output to a table - Join verdor with company name
The `vendor` table have the start and end IPs 'int' format and the ASN number. This step add the company names from the updated potaroo table.
Curently using `etl_script_generated_set_riaan.vendor` should move to `etl_script_generated_set.vendor` when it is avalible.



#+BEGIN_SRC tmate :window prepare
bq query --nouse_legacy_sql --destination_table riaan_data_store.5_etl_test_vendor_with_company_name_org  'SELECT A.asn, cidr_ip, start_ip, end_ip, start_ip_int, end_ip_int,name_with_yaml_name FROM ( SELECT asn, cidr_ip, start_ip, end_ip, start_ip_int, end_ip_int FROM `k8s-infra-ii-sandbox.etl_script_generated_set_riaan.vendor`) A LEFT OUTER JOIN ( SELECT asn, name_with_yaml_name FROM `k8s-infra-ii-sandbox.riaan_data_store.4_etl_test_potaroo_with_yaml_names_in_one_column_org`) B ON A.asn=B.asn'
#+END_SRC




*** 6. Output to a table - Join ASN data to distinct IPs
This step use the updated verdor table with company names to add 'company name' and 'asn number' to the the list of distinct IP addresses.
There is insuficient BQ resource to complete this query. Tested it with 'LIMIT 1000'

#+BEGIN_SRC tmate :window prepare
bq query --nouse_legacy_sql --destination_table riaan_data_store.6_etl_test_join_asn_and_distinct_ip_org  'SELECT c_ip, Total_Count, c_ip_int,asn, name_with_yaml_name FROM`k8s-infra-ii-sandbox.riaan_data_store.2_etl_test_distinct_ip_and_int_org`, `k8s-infra-ii-sandbox.riaan_data_store.5_etl_test_vendor_with_company_name_org` WHERE c_ip_int >=start_ip_int AND c_ip_int <=end_ip_int LIMIT 1000'
#+END_SRC




*** 7. Output to a table - Join the IP / ASN / Company name with the `usage_all` table
This step updated the `usage_all` with company name and asn from the `distinc IP table + company name + asn` table.
There is insuficient BQ resource to complete this query. Tested it with `LIMIT 1000`
Using `etl_staging.usage_all_20210608` must move to autogenerated `usage_all` when avalible

#+BEGIN_SRC tmate :window prepare
bq query --nouse_legacy_sql --destination_table riaan_data_store.7_etl_test_join_usage_all_with_asn_and_company_name_org  'SELECT time_micros, A.c_ip, c_ip_type,  c_ip_region, cs_method, cs_uri, sc_status, cs_bytes, sc_bytes, time_taken_micros, cs_host, cs_referer, cs_user_agent, s_request_id, cs_operation, cs_bucket, cs_object,   asn, name_with_yaml_name  FROM ( SELECT time_micros, c_ip, c_ip_type, c_ip_region, cs_method, cs_uri, sc_status, cs_bytes, sc_bytes, time_taken_micros, cs_host,   cs_referer, cs_user_agent, s_request_id, cs_operation, cs_bucket, cs_object FROM  `k8s-infra-ii-sandbox.etl_staging.usage_all_20210608` ) A LEFT OUTER JOIN ( SELECT asn, c_ip,name_with_yaml_name FROM `k8s-infra-ii-sandbox.riaan_data_store.6_etl_test_join_asn_and_distinct_ip_org`) B ON A.c_ip=B.c_ip LIMIT 1000 '
#+END_SRC


*** 8. Transform cs_referer to image name - Bonus step
Work in BQ GUI, fail in .org: `syntax error near unexpected token `('  `

#+BEGIN_SRC tmate :window prepare
bq query --nouse_legacy_sql --destination_table riaan_data_store.8_etl_test_join_usage_all_with_asn_and_company_name_and_image_name_org  'SELECT *, REGEXP_EXTRACT (cs_referer,'^https://(?:[^/]+)/+v2/(?:k8s-artifacts-prod/+)*([a-z0-9-/]+)/blobs/sha256:(?:[a-f0-9]+)') AS image_name FROM  `k8s-infra-ii-sandbox.riaan_data_store.7_etl_test_join_usage_all_with_asn_and_company_name_org` '
#+END_SRC
