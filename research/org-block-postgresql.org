#+TITLE: BOO
* Footnotes
** sql-product
#+begin_src elisp
(symbol-value 'sql-product)
#+end_src

#+RESULTS:
#+begin_src elisp
ansi
#+end_src

** sql-connection-alist
#+begin_src elisp
(symbol-value 'sql-connection-alist)
#+end_src

#+RESULTS:
#+begin_src elisp
nil
#+end_src

** org-babel-default-header-args:sql-mode
#+begin_src elisp
(symbol-value 'org-babel-default-header-args:sql-mode)
#+end_src

#+RESULTS:
#+begin_src elisp
((:results . "replace code")
 (:product . "postgres")
 (:wrap . "SRC example"))
#+end_src

** org-babel-header-args:sql-mode
#+begin_src elisp
(symbol-value 'org-babel-header-args:sql-mode)
#+end_src

#+RESULTS:
#+begin_src elisp
((:product . :any)
 (:session . :any))
#+end_src

** org-file-properties
We've set this one in the past to a alist of
#+begin_src elisp
 (set (make-local-variable 'org-file-properties)
          (list
           (cons 'header-args:sql-mode
                 (concat
                  ":noweb yes"
                  " :noweb-ref " item-str
                  " :comments org"
                  " :eval never-export"
                  " :results code"
                  " :product postgres"
                  " :session data"
                  ;; " :session (symbol-value user-login-name)"
                  ;; " :session (concat user-login-name \":\" " "main" ")"
                  ;; " :session (concat user-login-name \":\" " item-str ")"
                  " :exports both"
                  ))
           )
#+end_src

#+RESULTS:
#+begin_src elisp
((:product . :any)
 (:session . :any))
#+end_src
* Deploying postgres
** Secrets
#+name: postgres-secret
#+begin_src yaml
apiVersion: v1
kind: Secret
metadata:
  name: postgres-configuration
stringData:
  POSTGRES_DB: postgres
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  PGDATABASE: postgres
  PGUSER: postgres
#+end_src
** Deployment
#+name: postgres-deployment
#+begin_src yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
spec:
  replicas: 1
  serviceName: "postgres"
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      restartPolicy: Always
      containers:
      - name: postgres
        image: docker.io/postgres:12.2-alpine
        securityContext:
          readOnlyRootFilesystem: true
          runAsUser: 70
          runAsGroup: 70
          allowPrivilegeEscalation: false
        volumeMounts:
          - name: var-lib-postgresql
            mountPath: /var/lib/postgresql/data
          - name: var-run-postgresql
            mountPath: /var/run/postgresql
          - name: tmp
            mountPath: /tmp
        ports:
        - containerPort: 5432
        livenessProbe:
          exec:
            command:
            - "sh"
            - "-c"
            - "pg_isready"
            - "-U"
            - "$POSTGRES_USER"
          failureThreshold: 5
          periodSeconds: 10
          timeoutSeconds: 5
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-configuration
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-configuration
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-configuration
              key: POSTGRES_PASSWORD
        - name: PGDATABASE
          valueFrom:
            secretKeyRef:
              name: postgres-configuration
              key: PGDATABASE
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: postgres-configuration
              key: PGUSER
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
      initContainers:
        - name: postgres-db-permissions-fix
          image: alpine:3.12
          command:
            - /bin/sh
            - -c
            - "/bin/chown -R 70:70 /var/lib/postgresql/data"
          volumeMounts:
          - name: var-lib-postgresql
            mountPath: /var/lib/postgresql/data
      volumes:
        - name: var-lib-postgresql
          persistentVolumeClaim:
            claimName: postgres-pvc
        - name: var-run-postgresql
          emptyDir: {}
        - name: tmp
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  selector:
    app: postgres
  ports:
  - name: "5432"
    port: 5432
    targetPort: 5432
#+end_src
** Deploying Postgres
#+begin_src shell :noweb yes
kubectl apply -f - << EOF
<<postgres-secret>>
---
<<postgres-deployment>>
EOF
#+end_src

#+RESULTS:
#+begin_example
secret/postgres-configuration created
persistentvolumeclaim/postgres-pvc created
statefulset.apps/postgres created
service/postgres created
#+end_example

* Setting local vars
** Defaults for sql-mode blocks
#+begin_src elisp :result silent
(set (make-local-variable 'org-babel-default-header-args:sql-mode)
     ;; Set up all sql-mode blocks to be postgres and literate
            '((:results . "replace code")
              (:product . "postgres")
              (:session . "none")
              (:noweb . "yes")
              (:comments . "no")
              (:wrap . "SRC example")))
#+end_src

#+RESULTS:
#+begin_src elisp
((:results . "replace code")
 (:product . "postgres")
 (:session . "none")
 (:noweb . "yes")
 (:comments . "no")
 (:wrap . "SRC example"))
#+end_src

** Deault for connecting to sql-mode
#+begin_src elisp :results silent
(set (make-local-variable 'sql-server) "postgres")
(set (make-local-variable 'sql-port) 5432)
(set (make-local-variable 'sql-user) "postgres")
(set (make-local-variable 'sql-database) "postgres")
(set (make-local-variable 'sql-product) '(quote postgres))
#+end_src

** Deault for creating new sql-mode connections
#+begin_src elisp :results silent
(set (make-local-variable 'sql-connection-alist)
     (list
      ;; setting these allows for the connection to be
      ;; created on the fly
      (list 'none
            (list 'sql-product '(quote postgres))
            (list 'sql-user sql-user)
            (list 'sql-database sql-database)
            (list 'sql-port sql-port)
            (list 'sql-server sql-server))))
#+end_src
* Verify things are up
** Pod
#+begin_src shell
kubectl get pod -l app=postgres
#+end_src

#+RESULTS:
#+begin_example
NAME         READY   STATUS    RESTARTS   AGE
postgres-0   1/1     Running   0          47s
#+end_example
** Service
#+begin_src shell
kubectl get service postgres
#+end_src

#+RESULTS:
#+begin_example
NAME       TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE
postgres   ClusterIP   10.96.151.12   <none>        5432/TCP   74s
#+end_example

* SQL
#+begin_src sql-mode
select 1;
#+end_src

#+RESULTS:
#+begin_SRC example
 ?column?
----------
        1
(1 row)

#+end_SRC
