#+TITLE: Etl_asn_company_table
Goal get most definitive Company ASN match from:
https://bgp.potaroo.net/cidr/autnums.html

* Get asn to company list
TODDO: this section needs to be replaced with:
curl -s  https://bgp.potaroo.net/cidr/autnums.html | sed -nre '/AS[0-9]/s/.*as=([^&]+)&.*">([^<]+)<\/a> ([^"]+)/"\1", "\3"/p'
I tested it and it still failed on one line, I did not troubleshoot, but this would be a way better way to get the data
That Said the solution using beautiful soup still works

** curl the data
#+BEGIN_SRC tmate :window autonums :dir (concat (getenv "HOME"))
 mkdir autonums
 cd autonums
# wget https://bgp.potaroo.net/cidr/autnums.html
curl -s  https://bgp.potaroo.net/cidr/autnums.html | sed -nre '/AS[0-9]/s/.*as=([^&]+)&.*">([^<]+)<\/a> ([^"]+)/"\1", "\3"/p > autnums_sed.csv
#+END_SRC
#+BEGIN_SRC tmate :window autonums :dir (concat (getenv "HOME") "/autonums")
cat autnums.html
#+END_SRC
** Suggestion from zz is to use the beautiful soup library from python
I am going to work through https://zetcode.com/python/beautifulsoup/#:~:text=BeautifulSoup%20is%20a%20Python%20library,%2C%20navigable%20string%2C%20or%20comment.
I will work in the autonums dir

#+BEGIN_SRC tmate :window autonums :dir (concat (getenv "HOME") "/autonums")
sudo pip3 install lxml
#+END_SRC
#+BEGIN_SRC tmate :window autonums :dir (concat (getenv "HOME") "/autonums")
sudo pip3 install bs4
#+END_SRC
#+BEGIN_SRC tmate :window autonums :dir (concat (getenv "HOME") "/autonums")
cat autnums.html | head
#+END_SRC

#+BEGIN_SRC python tmate :window python
#print('Please wait')
return 'A line of text.\n'
#+END_SRC

#+RESULTS:
#+begin_example
/home/ii/ii/org/research
#+end_example
*** run python in-line, FAIL
Python in org is not working, something related to list
Error: if: Symbolâ€™s value as variable is void: eshell-modules-list
Skipping troubleshooting this, just going to run it as a script in tmate
#+BEGIN_SRC python :dir (concat (getenv "HOME") "/autonums") :results output
from bs4 import BeautifulSoup
print ('start')
with open('/home/ii/autonums/autnums.html', 'r') as f:
    contents = f.read()
    soup = BeautifulSoup(contents, 'lxml')
    print(soup.head)
print ('end')
#+END_SRC
Even very basic command that works in a old box fails
#+BEGIN_SRC python tmate :window python
#print('Please wait')
return 'A line of text.\n'.rstrip()
#+END_SRC

*** run python in script WORKS
You have to tangle this file out with ctrl-c, ctrl-v, t
NOTE, that command will write files for all tangle blocks in the document
If you dont want this on to write to disk again just comment it out.
#+BEGIN_SRC python :tangle (concat (getenv "HOME") "/autonums/testing_soup.py")
#!/usr/bin/python
from bs4 import BeautifulSoup
with open('/home/ii/autonums/autnums.html', 'r') as f:
    contents = f.read()
    soup = BeautifulSoup(contents, 'lxml')
        print(soup.head)
#+END_SRC
This runs the above to produce output
#+BEGIN_SRC tmate :window autonums :dir (concat (getenv "HOME") "/autonums")
chmod +x testing_soup.py
python testing_soup.py
#+END_SRC
** Build the script using beautiful soup
#+BEGIN_SRC python :tangle (concat (getenv "HOME") "/autonums/soup.py")
#!/usr/bin/python
from bs4 import BeautifulSoup
with open('/home/ii/autonums/autnums.html', 'r') as input_file:
    contents = input_file.read()
    soup = BeautifulSoup(contents, 'lxml')
#    printn(soup.a)
for tag in soup.find_all('a'):
    asn = (f'"{tag.text}, {tag.next_sibling}"')
    # print(asn)
    results_file = open("asn_company_results.csv", "a")
    results_file.write(asn)
    results_file.write("\n")
   # print >>results_file, asn
    results_file.close()
input_file.close()
#+END_SRC
** Run script, clean up ouput.
TODO: Replace entire polling of this date, it could be done in 3 lines by somebody comfortable with regex.
This runs the above to produce output,
It will fail unless you run the sed cleanup block below.
    #+BEGIN_SRC tmate :window autonums :dir (concat (getenv "HOME") "/autonums")
chmod +x soup.py
python soup.py
#+END_SRC
Litle cleanup of the output
ok this is GROSSS! I know I know, dont judge me
Obviously I just dealt with each import failure one at a time till it worked
Stephen is taking a look to see if he can clean some of this up to be a bit more elegant
Thank you Stephen!!
#+BEGIN_SRC tmate :window autonums :dir (concat (getenv "HOME") "/autonums")
sed -i 's/,//2' asn_company_results.csv
sed -i 's/,//2' asn_company_results.csv
sed -i 's/,//2' asn_company_results.csv
sed -i 's/,//2' asn_company_results.csv
sed -i 's/,//2' asn_company_results.csv
sed -i 's/,//2' asn_company_results.csv
sed -i 's/,//2' asn_company_results.csv
sed -i 's/\.,//' asn_company_results.csv
sed -i 's/\s\+,/\,/' asn_company_results.csv
sed -i 's/,\s\+/,\"/' asn_company_results.csv
sed -i 's/,/\",/' asn_company_results.csv
sed -i 's/CT-CNGI China telecom AC\/AEUR.*/CT-CNGI China telecom AC\/AEURA/g' asn_company_results.csv
sed -i 's/IRKUT_IAP-AS.*/IRKUT_IAP-AS/g' asn_company_results.csv
sed -i '/^\"$/d' asn_company_results.csv
sed -i 's/$/\"/' asn_company_results.csv
#+END_SRC
** Import to postgres
I stand up a postgres instance in the peeringdb section
If you need one go look in peeringdb to see the command to start one.
#+BEGIN_SRC sql-mode
-- adding this table to match wat caleb used
--create table asnproc (asn varchar, name varchar);
\COPY asnproc from '/home/ii/autonums/asn_company_results.csv' DELIMITER ',' CSV;
--create table company_asn  (asn varchar, name varchar);
\COPY company_asn from '/home/ii/autonums/asn_company_results.csv' DELIMITER ',' CSV;
#+END_SRC

#+RESULTS:
#+begin_SRC example
#+end_SRC
#+BEGIN_SRC sql-mode
--select * from company_asn limit 10;
select * from asnproc limit 10;
#+END_SRC

#+RESULTS:
#+begin_SRC example
#+end_SRC
** Export and upload to gbucket

#+begin_src sql-mode
\copy (select * from asnproc) to '~/peeringdb_company_asn.csv' csv header;
#+end_src

#+RESULTS:
#+begin_SRC example
COPY 181219
#+end_SRC
Login to gcloud
#+BEGIN_SRC tmate :window prepare
gcloud auth login
#+END_SRC

Set the project
#+BEGIN_SRC tmate :window prepare
gcloud config set project k8s-infra-ii-sandbox
#+END_SRC

#+BEGIN_SRC shell :results silent
gsutil cp ~/peeringdb_company_asn.csv gs://ii_bq_scratch_dump/peeringdb_company_asn.csv
#+END_SRC
#+BEGIN_SRC shell
gsutil ls gs://ii_bq_scratch_dump/
#+END_SRC

#+RESULTS:
#+begin_example
gs://ii_bq_scratch_dump/asn-data.csv
gs://ii_bq_scratch_dump/haha.csv
gs://ii_bq_scratch_dump/haha.json
gs://ii_bq_scratch_dump/image-tag-hash.csv
gs://ii_bq_scratch_dump/ip-and-asn.json
gs://ii_bq_scratch_dump/peeringdb-dump-20210512.sql
gs://ii_bq_scratch_dump/peeringdb-dump-20210603.sql
gs://ii_bq_scratch_dump/peeringdb_company_asn.csv
gs://ii_bq_scratch_dump/resource_and_hash_distinct_list.json
#+end_example
