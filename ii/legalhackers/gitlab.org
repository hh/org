#+TITLE: Setting up Gitlab
#+AUTHOR: Hippie Hacker and James Blair
#+EMAIL: hh@ii.coop and mail@jamesblair.net
#+CREATOR: ii.coop + Inland Revenue
#+DATE: 5th of October, 2018
#+PROPERTY: header-args:shell :results output list raw replace
#+PROPERTY: header-args:tmate  :socket (symbol-value 'socket)
#+PROPERTY: header-args:tmate+ :session (user-login-name)

* Preparing to use the Gitlab Chart
:PROPERTIES:
:header-args:tmate+: :session br-right:misc
:END:

Gitlab provides [[https://gitlab.com/charts/gitlab/blob/master/doc/installation/README.md][some decent documentation]] including a [[https://gitlab.com/charts/gitlab/blob/master/doc/cloud/gke.md#scripted-cluster-creation-on-gke][script to spin up a cluster on gke]].

This section mostly follows that guide for the google portion, but we branch out
to try Catalyst cloud.

** Install Helm

There are other ways, but this is the most succinct.
 :session br-right:misc

#+NAME: Install Helm
#+BEGIN_SRC tmate
# :session br-right:misc
curl -L https://storage.googleapis.com/kubernetes-helm/helm-v2.10.0-linux-amd64.tar.gz \
  | tar xvz -f - --strip-components 1 -C /usr/local/bin
#+END_SRC

** Download the gitlab chart source

We mainly need this for the GKE Setup Script for now.

#+NAME: Go get gitlab chart
#+BEGIN_SRC tmate :session br-right:misc
git clone https://gitlab.com/charts/gitlab.git ~/gitlab
#+END_SRC

*** GKE
**** GKE Setup Script

  You'll need to customize this with an project of your own.

***** Verify your gcloud credentials 

     There are various ways to authenticate, we will just ensure the correct
     account is active.

     #+NAME: Verify your gcloud credentials
     #+BEGIN_SRC shell :exports both :results code
     gcloud auth list
     #+END_SRC

     #+RESULTS: Verify your gcloud credentials
     #+BEGIN_SRC shell
              Credentialed Accounts
     ACTIVE             ACCOUNT
     ,*                  hh@ii.coop
     #+END_SRC

***** Choose a gcloud project

  Choose an account from your available ones.

  #+NAME: List your gcloud projects
  #+BEGIN_SRC shell :exports both :results code
  gcloud projects list
  #+END_SRC

  #+RESULTS: List your gcloud projects
  #+BEGIN_SRC shell
  PROJECT_ID         NAME               PROJECT_NUMBER
  cncf-gitlab        cncf-gitlab        368775700279
  gitlab-br-coop     GitLab-br-coop     916237797088
  br-coop            br-coop            46173955477
  br-enspiral        br-enspiral        135963852157
  kubernetes-public  kubernetes-public  127754664067
  openci-io          openci             434061009048
  recode-215103      recode             334208224319
  recodenz           recodenz           754872138011
  #+END_SRC

***** Up the cluster using the gitlab gke script

  You'll need to set the 'PROJECT' environment variable to the name of your chosen
  gke project, then run the script with the 'up' parameter.

  #+NAME: Use gitlab gke script
  #+BEGIN_SRC tmux :session br-right:misc
  cd ~/gitlab
  export PROJECT=recodenz
  ./scripts/gke_bootstrap_script.sh up
  #+END_SRC

***** Verify that the external-dns has started

  #+NAME: Verify that external-dns has started, run:
  #+BEGIN_SRC shell :results code
  kubectl --namespace=kube-system get pods -l "app=external-dns,release=dns"
  #+END_SRC

  #+RESULTS: Verify that external-dns has started, run:
  #+BEGIN_SRC shell
  NAME                               READY   STATUS    RESTARTS   AGE
  dns-external-dns-fb98777fb-xl276   1/1     Running   0          8m46s
  #+END_SRC

**** Create an external IP
#+BEGIN_SRC tmux :session br:gitlab
git clone git@gitlab.com:charts/gitlab.git ~/gitlab
#+END_SRC

** Using GKE
*** GKE Setup Script

 You'll need to customize this with an project of your own.

**** Verify your gcloud credentials 

    There are various ways to authenticate, we will just ensure the correct
    account is active.

    #+NAME: Verify your gcloud credentials
    #+BEGIN_SRC shell :exports both :results code
    gcloud auth list
    #+END_SRC

    #+RESULTS: Verify your gcloud credentials
    #+BEGIN_SRC shell
             Credentialed Accounts
    ACTIVE             ACCOUNT
    ,*                  hh@ii.coop
    #+END_SRC

**** Choose a gcloud project

 Choose an account from your available ones.

 #+NAME: List your gcloud projects
 #+BEGIN_SRC shell :exports both :results code
 gcloud projects list
 #+END_SRC

 #+RESULTS: List your gcloud projects
 #+BEGIN_SRC shell
 PROJECT_ID         NAME               PROJECT_NUMBER
 cncf-gitlab        cncf-gitlab        368775700279
 gitlab-ii-coop     GitLab-ii-coop     916237797088
 ii-coop            ii-coop            46173955477
 ii-enspiral        ii-enspiral        135963852157
 kubernetes-public  kubernetes-public  127754664067
 openci-io          openci             434061009048
 recode-215103      recode             334208224319
 recodenz           recodenz           754872138011
 #+END_SRC

**** Up the cluster using the gitlab gke script

 You'll need to set the 'PROJECT' environment variable to the name of your chosen
 gke project, then run the script with the 'up' parameter.

 #+NAME: Use gitlab gke script
 #+BEGIN_SRC tmux :session br:gitlab
 cd ~/gitlab
 export PROJECT=recodenz
 ./scripts/gke_bootstrap_script.sh up
 #+END_SRC

**** Verify that the external-dns has started

 #+NAME: Verify that external-dns has started, run:
 #+BEGIN_SRC shell :results code
 kubectl --namespace=kube-system get pods -l "app=external-dns,release=dns"
 #+END_SRC

 #+RESULTS: Verify that external-dns has started, run:
 #+BEGIN_SRC shell
 NAME                               READY   STATUS    RESTARTS   AGE
 dns-external-dns-fb98777fb-xl276   1/1     Running   0          8m46s
 #+END_SRC

*** Create an external IP

 We will need the external IP to point our DNS subdomain DNS to. Additionally we
 will use that ip within the gitlab chart.

 We first create an external-ip

 #+NAME: Create the external IP
 #+BEGIN_SRC tmux :session br:gitlab
 export PROJECT=recodenz
 export CLUSTER_NAME=gitlab-cluster
 export REGION=us-central1
 gcloud compute addresses create ${CLUSTER_NAME}-external-ip --region $REGION --project $PROJECT
 #+END_SRC

 #+NAME: Retrieve ingress IP
 #+BEGIN_SRC tmux :session br:gitlab
 export PROJECT=recodenz
 export CLUSTER_NAME=gitlab-cluster
 export REGION=us-central1
 gcloud compute addresses describe ${CLUSTER_NAME}-external-ip --region $REGION --project $PROJECT --format='value(address)'
 #+END_SRC

 #+NAME: ingress_ip
 #+BEGIN_SRC shell 
 export PROJECT=recodenz
 export CLUSTER_NAME=gitlab-cluster
 export REGION=us-central1
 gcloud compute addresses describe ${CLUSTER_NAME}-external-ip --region $REGION --project $PROJECT --format='value(address)'
 #+END_SRC

 #+RESULTS: ingress_ip
 : 35.193.219.220

** Using Catalyst (Openstack+Magnum)

You can launch a cluster manually, but to use the API you'll need to [[http://docs.catalystcloud.io/key-concepts/access.html?highlight=white%2520list][create a ticket to whitelist your IP.]]

Visit  [[https://dashboard.cloud.catalyst.net.nz/management/tickets/create/][the dashboard ticket system]] and ask for your IP to be added to the whitelist. 

#+NAME: os_auth_url
#+BEGIN_SRC tmate :session hh-right:foo
  (
    . ~/Downloads/iicoop-openrc.sh
    TIMEOUT=1
    OS_HOST=$(echo $OS_AUTH_URL | awk -F/ '{print $3}' | awk -F: '{print $1}')
    OS_PORT=$(echo $OS_AUTH_URL | awk -F/ '{print $3}' | awk -F: '{print $2}')
    echo $OS_AUTH_URL
  ) 2>&1
#+END_SRC
#+NAME: os_auth_url
#+BEGIN_SRC shell :exports both :results code
  (
    . ~/Downloads/iicoop-openrc.sh
    TIMEOUT=1
    curl -s -S -m $TIMEOUT $OS_AUTH_URL
    OS_HOST=$(echo $OS_AUTH_URL | awk -F/ '{print $3}' | awk -F: '{print $1}')
    OS_PORT=$(echo $OS_AUTH_URL | awk -F/ '{print $3}' | awk -F: '{print $2}')
    nc -vvv -w $TIMEOUT $OS_HOST $OS_PORT
    
    echo $OS_AUTH_URL
  ) 2>&1
#+END_SRC

#+RESULTS: os_auth_url
| curl:                                         | (28)    | Connection | timed                         | out  | after |  5001 | milliseconds |      |           |     |    |          |
| nc:                                           | connect | to         | api.nz-hlz-1.catalystcloud.io | port |  5000 | (tcp) | timed        | out: | Operation | now | in | progress |
| https://api.nz-hlz-1.catalystcloud.io:5000/v3 |         |            |                               |      |       |       |              |      |           |     |    |          |


#+NAME: my_ip
#+BEGIN_SRC shell
curl https://ifconfig.co
#+END_SRC

#+RESULTS: my_ip
: 103.26.16.43

*** 

 You'll need to customize this with an project of your own.

**** Verify your gcloud credentials 

    There are various ways to authenticate, we will just ensure the correct
    account is active.

    #+NAME: Verify your gcloud credentials
    #+BEGIN_SRC shell :exports both :results code
    gcloud auth list
    #+END_SRC

    #+RESULTS: Verify your gcloud credentials
    #+BEGIN_SRC shell
             Credentialed Accounts
    ACTIVE             ACCOUNT
    ,*                  hh@ii.coop
    #+END_SRC

**** Choose a gcloud project

 Choose an account from your available ones.

 #+NAME: List your gcloud projects
 #+BEGIN_SRC shell :exports both :results code
 gcloud projects list
 #+END_SRC

 #+RESULTS: List your gcloud projects
 #+BEGIN_SRC shell
 PROJECT_ID         NAME               PROJECT_NUMBER
 cncf-gitlab        cncf-gitlab        368775700279
 gitlab-ii-coop     GitLab-ii-coop     916237797088
 ii-coop            ii-coop            46173955477
 ii-enspiral        ii-enspiral        135963852157
 kubernetes-public  kubernetes-public  127754664067
 openci-io          openci             434061009048
 recode-215103      recode             334208224319
 recodenz           recodenz           754872138011
 #+END_SRC

**** Up the cluster using the gitlab gke script

 You'll need to set the 'PROJECT' environment variable to the name of your chosen
 gke project, then run the script with the 'up' parameter.

 #+NAME: Use gitlab gke script
 #+BEGIN_SRC tmux :session br:gitlab
 cd ~/gitlab
 export PROJECT=recodenz
 ./scripts/gke_bootstrap_script.sh up
 #+END_SRC

**** Verify that the external-dns has started

 #+NAME: Verify that external-dns has started, run:
 #+BEGIN_SRC shell :results code
 kubectl --namespace=kube-system get pods -l "app=external-dns,release=dns"
 #+END_SRC

 #+RESULTS: Verify that external-dns has started, run:
 #+BEGIN_SRC shell
 NAME                               READY   STATUS    RESTARTS   AGE
 dns-external-dns-fb98777fb-xl276   1/1     Running   0          8m46s
 #+END_SRC

*** Create an external IP

 We will need the external IP to point our DNS subdomain DNS to. Additionally we
 will use that ip within the gitlab chart.

 We first create an external-ip

 #+NAME: Create the external IP
 #+BEGIN_SRC tmux :session br:gitlab
 export PROJECT=recodenz
 export CLUSTER_NAME=gitlab-cluster
 export REGION=us-central1
 gcloud compute addresses create ${CLUSTER_NAME}-external-ip --region $REGION --project $PROJECT
 #+END_SRC

 #+NAME: Retrieve ingress IP
 #+BEGIN_SRC tmux :session br:gitlab
 export PROJECT=recodenz
 export CLUSTER_NAME=gitlab-cluster
 export REGION=us-central1
 gcloud compute addresses describe ${CLUSTER_NAME}-external-ip --region $REGION --project $PROJECT --format='value(address)'
 #+END_SRC

 #+NAME: ingress_ip
 #+BEGIN_SRC shell 
 export PROJECT=recodenz
 export CLUSTER_NAME=gitlab-cluster
 export REGION=us-central1
 gcloud compute addresses describe ${CLUSTER_NAME}-external-ip --region $REGION --project $PROJECT --format='value(address)'
 #+END_SRC

 #+RESULTS: ingress_ip
 : 35.193.219.220
>>>>>>> Stashed changes

  We will need the external IP to point our DNS subdomain DNS to. Additionally we
  will use that ip within the gitlab chart.

  We first create an external-ip

  #+NAME: Create the external IP
  #+BEGIN_SRC tmux :session br-right:misc
  export PROJECT=recodenz
  export CLUSTER_NAME=gitlab-cluster
  export REGION=us-central1
  gcloud compute addresses create ${CLUSTER_NAME}-external-ip --region $REGION --project $PROJECT
  #+END_SRC

  #+NAME: Retrieve ingress IP
  #+BEGIN_SRC tmux :session br-right:misc
  export PROJECT=recodenz
  export CLUSTER_NAME=gitlab-cluster
  export REGION=us-central1
  gcloud compute addresses describe ${CLUSTER_NAME}-external-ip --region $REGION --project $PROJECT --format='value(address)'
  #+END_SRC

  #+NAME: ingress_ip
  #+BEGIN_SRC shell 
  export PROJECT=recodenz
  export CLUSTER_NAME=gitlab-cluster
  export REGION=us-central1
  gcloud compute addresses describe ${CLUSTER_NAME}-external-ip --region $REGION --project $PROJECT --format='value(address)'
  #+END_SRC

  #+RESULTS: ingress_ip
  : 35.193.219.220

**** Setup / Verify wildcard DNS for *.recode.ii.nz

  Until we self host in NZ on ii infra, we are using dnsimple, though you could use anything.

  This is just to verify that we have wildcard DNS setup.

  Ensure this matches our IP

  #+NAME: dig checks for *.recode.ii.nz
  #+BEGIN_SRC shell :results verbatim code :var INGRESS=ingress_ip
  dig foo.recode.ii.nz | grep ii.nz
  dig bar.recode.ii.nz | grep ii.nz
  echo "*****This should point to _${INGRESS}_*****"
  #+END_SRC

  #+RESULTS: dig checks for *.recode.ii.nz
  #+BEGIN_SRC shell
  ; <<>> DiG 9.10.3-P4-Debian <<>> foo.recode.ii.nz
  ;foo.recode.ii.nz.		IN	A
  foo.recode.ii.nz.	35	IN	A	35.193.219.220
  ; <<>> DiG 9.10.3-P4-Debian <<>> bar.recode.ii.nz
  ;bar.recode.ii.nz.		IN	A
  bar.recode.ii.nz.	35	IN	A	35.193.219.220
  ,*****This should point to _35.193.219.220_*****
  #+END_SRC

*** Catalyst Cloud

Login to [[https://dashboard.cloud.catalyst.net.nz][Catalyst Cloud Dashboard]] and ensure your user has the [[https://dashboard.cloud.catalyst.net.nz/management/project_users/][Heat Stack Owner]]
 role.

[[https://dashboard.cloud.catalyst.net.nz/project/clusters][Create a new cluster]]

Ensure you have a valid keypair to ssh in.

** Getting kubectl accessing cluster
#+BEGIN_SRC tmate
  scp -P 22111 root@43.243.56.235:/etc/kubernetes/admin.conf kubeconfig.conf
  export KUBECONFIG=$(pwd)/kubeconfig.conf
#+END_SRC   
* Deploy Using the Gitlab Chart

** Configure helm to use charts.gitlab.io

#+NAME: Get Chart for gitlab
#+BEGIN_SRC tmate :session br-right:misc
helm repo add gitlab https://charts.gitlab.io/
helm repo update
#+END_SRC

#+NAME: Get Chart for gitlab
#+BEGIN_SRC shell :results code
helm repo add gitlab https://charts.gitlab.io/
helm repo update
#+END_SRC

#+RESULTS: Get Chart for gitlab
#+BEGIN_SRC shell
"gitlab" has been added to your repositories
Hang tight while we grab the latest from your chart repositories...
...Skip local chart repository
...Successfully got an update from the "gitlab" chart repository
...Successfully got an update from the "stable" chart repository
Update Complete. ⎈ Happy Helming!⎈ 
#+END_SRC

#+NAME: Verify we have the charts
#+BEGIN_SRC shell :results code
helm search gitlab/gitlab
#+END_SRC

#+RESULTS: Verify we have the charts
#+BEGIN_SRC shell
- NAME                 	CHART VERSION	APP VERSION	DESCRIPTION                                                 
- gitlab/gitlab        	1.4.2        	11.6.3     	Web-based Git-repository manager with wiki and issue-trac...
- gitlab/gitlab-omnibus	0.1.37       	           	GitLab Omnibus all-in-one bundle                            
- gitlab/gitlab-runner 	0.1.45-rc1   	11.7.0-rc1 	GitLab Runner
#+END_SRC

** Getting our secrets

IN this section, we setup a secrets.env that looks similar to this:

#+NAME: secrets.env
#+BEGIN_SRC shell :noeval
SMTP_USER_NAME="postmaster@recode.ii.nz"
SMTP_PASSWORD="apassword"
OMNIAUTH_GITHUB_APP_ID=dexxxxxxxxxxxxxxxx888a
OMNIAUTH_GITHUB_APP_SECRET=27exxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx814
OMNIAUTH_GOOGLE_APP_ID=75xxxxxxx011-mo0xxxxxxxxxxxxxxxxxxv77vo.apps.googleusercontent.com
OMNIAUTH_GOOGLE_APP_SECRET=gcPxxxxxxxxxxxxxoJaOM
#+END_SRC

*** User Name for SMTP

We use mailgun for now, until there is a smtp.ii.nz

#+NAME: smtp_user_name
#+BEGIN_SRC shell :results output silent
. secrets.env ; echo -n $SMTP_USER_NAME
#+END_SRC

#+NAME: smtp_password
#+BEGIN_SRC shell :results output silent
. secrets.env ; echo -n $SMTP_PASSWORD
#+END_SRC

*** Github Oauth
#+NAME: omniauth_github_app_id
#+BEGIN_SRC shell :results output silent
. secrets.env ; echo -n $OMNIAUTH_GITHUB_APP_ID
#+END_SRC

#+NAME: omniauth_github_app_secret
#+BEGIN_SRC shell :results output silent
. secrets.env ; echo -n $OMNIAUTH_GITHUB_APP_SECRET
#+END_SRC

*** Google Oauth
#+NAME: omniauth_google_app_id
#+BEGIN_SRC shell :results output silent
. secrets.env ; echo -n $OMNIAUTH_GOOGLE_APP_ID
#+END_SRC

#+NAME: omniauth_google_app_secret
#+BEGIN_SRC shell :results output silent
. secrets.env ; echo -n $OMNIAUTH_GOOGLE_APP_SECRET
#+END_SRC

** Configure the Chart

#+NAME: The Config
#+BEGIN_SRC yaml :tangle recode.gitlab.yaml :noweb yes
  # Global chart properties
  global:
    hosts:
      domain: recode.ii.nz
      externalIP: 43.243.56.235
      #<<ingress_ip()>>
  # Outgoing email server settings
  #    smtp:
  #      enabled: true
  #      address: smtp.mailgun.org
  #      port: 2525
  #      user_name: "<<smtp_user_name()>>"
  #      password: "<<smtp_password()>>"
  #        # Needs to be stored as a k8s secret
  #        # this is the key, not the value
  #        #secret: "<<smtp_password()>>"
  #        #key: password
  #      #domain: recode.ii.nz
  #      authentication: "plain"
  #      starttls_auto: false
  #      openssl_verify_mode: "peer"
  # Email persona used in email sent by GitLab
  email:
    from: 'gitlab@recode.ii.nz'
    display_name: GitLab@recode.ii.nz
    reply_to: 'hh@ii.coop'
    subject_suffix: ' | ii.nz'
    time_zone: NZST
    timeout: 600
  certmanager-issuer:
   email: recode@ii.nz
  gitlab:
    migrations:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-rails-ce
    sidekiq:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ce
    sidekiq:
      image:
       repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-unicorn-ce
    sidekiq:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce
    omniauth:
      enabled: yes
      # autoSignInWithProvider: 
      allowSingleSignOn: ['github', 'google_oauth2']
      blockAutoCreatedUsers: false
      providers:
        - key: 'github'
          app_id: "<<omniauth_github_app_id()>>"
          app_secret: "<<omniauth_github_app_secret()>>"
        - key: 'google_oauth2'
          app_id: "<<omniauth_google_app_id()>>"
          app_secret: "<<omniauth_google_app_secret()>>"
      syncProfileAttributes: ['email']
#+END_SRC

** Verify cluster

We could run other commands, but this is enough for now.

#+NAME: Verify Cluster
#+BEGIN_SRC shell :results code
(
kubectl get pods --all-namespaces
) 2>&1
#+END_SRC

#+RESULTS: Verify Cluster
#+BEGIN_SRC shell
- NAMESPACE          NAME                                                   READY   STATUS                  RESTARTS   AGE
- gitlab             gitlab-certmanager-788c6859c6-rlwdp                    1/1     Running                 0          4m10s
- gitlab             gitlab-gitaly-0                                        1/1     Running                 0          4m10s
- gitlab             gitlab-gitlab-runner-6566bd6c9f-x82h5                  0/1     CrashLoopBackOff        5          4m10s
- gitlab             gitlab-gitlab-shell-574bf6674-cfnvm                    1/1     Running                 0          3m55s
- gitlab             gitlab-gitlab-shell-574bf6674-qj9zb                    1/1     Running                 0          4m10s
- gitlab             gitlab-issuer.1-znbbn                                  0/1     Completed               0          4m10s
- gitlab             gitlab-migrations.1-2bnxh                              0/1     Completed               0          4m10s
- gitlab             gitlab-minio-c64f9694b-zzlp5                           1/1     Running                 0          4m10s
- gitlab             gitlab-minio-create-buckets.1-v9xcs                    0/1     Completed               0          4m10s
- gitlab             gitlab-nginx-ingress-controller-78fb4c686b-jd8ld       1/1     Running                 0          4m10s
- gitlab             gitlab-nginx-ingress-controller-78fb4c686b-jhs76       1/1     Running                 0          4m10s
- gitlab             gitlab-nginx-ingress-controller-78fb4c686b-whftx       1/1     Running                 0          4m10s
- gitlab             gitlab-nginx-ingress-default-backend-7f87d67c8-l96x8   1/1     Running                 0          4m10s
- gitlab             gitlab-nginx-ingress-default-backend-7f87d67c8-t99ws   1/1     Running                 0          4m10s
- gitlab             gitlab-postgresql-cb4c58788-skdvx                      2/2     Running                 0          4m10s
- gitlab             gitlab-prometheus-server-66f6d79d66-5mpdb              2/2     Running                 0          4m9s
- gitlab             gitlab-redis-7577d89db9-x2kmb                          2/2     Running                 0          4m9s
- gitlab             gitlab-registry-786c59c8f5-jhvqf                       1/1     Running                 0          4m9s
- gitlab             gitlab-registry-786c59c8f5-pqh54                       1/1     Running                 0          3m55s
- gitlab             gitlab-sidekiq-all-in-1-64bdcb4dd5-89bk8               0/1     Init:CrashLoopBackOff   5          4m10s
- gitlab             gitlab-task-runner-674569d784-skxxc                    1/1     Running                 0          4m10s
- gitlab             gitlab-unicorn-7b86fc9749-r5sjv                        0/2     Init:2/3                2          4m10s
- gitlab             gitlab-unicorn-7b86fc9749-v2gbd                        0/2     Init:2/3                2          3m55s
- kube-system        calico-node-qm9pc                                      2/2     Running                 0          8h
- kube-system        coredns-86c58d9df4-98nmd                               1/1     Running                 0          8h
- kube-system        coredns-86c58d9df4-rz44g                               1/1     Running                 0          8h
- kube-system        etcd-s235                                              1/1     Running                 0          8h
- kube-system        hostpath-provisioner-75766d7558-qd72n                  1/1     Running                 2          3h42m
- kube-system        kube-apiserver-s235                                    1/1     Running                 0          8h
- kube-system        kube-controller-manager-s235                           1/1     Running                 0          8h
- kube-system        kube-proxy-pcrmx                                       1/1     Running                 0          8h
- kube-system        kube-scheduler-s235                                    1/1     Running                 0          8h
- kube-system        kubernetes-dashboard-57df4db6b-8vj9c                   1/1     Running                 0          6h21m
- kube-system        tiller-deploy-6cf89f5895-8f724                         1/1     Running                 0          7h14m
- rook-ceph-system   rook-ceph-agent-72bf2                                  1/1     Running                 0          6h30m
- rook-ceph-system   rook-ceph-operator-86554fd8d-r5bp5                     1/1     Running                 0          6h30m
- rook-ceph-system   rook-discover-2494q                                    1/1     Running                 0          6h30m
#+END_SRC

** Deploy Gitlab on Kubernetes 

*** Helm Initialization
**** Setup a Service Account and initialize tiller
#+NAME: Setup a Service Account
#+BEGIN_SRC tmate
  kubectl --namespace kube-system create serviceaccount tiller
  kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller
#+END_SRC
#+NAME: Initialize tiller
#+BEGIN_SRC tmate
  helm init --service-account tiller
#+END_SRC
  


*** Use the values yaml generated above to deploy gitlab

#+NAME: Deploy Gitlab on Kubernetes
#+BEGIN_SRC tmate :session br:misc
helm upgrade --install gitlab gitlab/gitlab --values recode.gitlab.yaml
#+END_SRC
*** You can fully cleanup / purge as to start over
#+NAME: Destroy / Purge helm deployment of gitlab to try again
#+BEGIN_SRC tmux :session br:deploy
helm delete --purge gitlab
#+END_SRC
*** Remove your cluster from gke (can get expensive if you leave it up)

This can be useful if you want to debug the deployment, iterate over different
configurations for testing.

#+NAME: Destroy / Purge GKE cluster
#+BEGIN_SRC tmux :session br:deploy
cd ~/gitlab
export PROJECT=recodenz
./scripts/gke_bootstrap_script.sh down
#+END_SRC

* Monitor the Progress of your gitlab installation
#+NAME: set_env  
#+BEGIN_SRC emacs-lisp :results silent
  ;; set this dynamically at some point to the most recent dind
  (setenv "KUBECONFIG" (concat (file-name-directory buffer-file-name) "kubeconfig.conf"))
#+END_SRC


#+NAME: replicaset
#+BEGIN_SRC shell
  rs=$(kubectl -n gitlab get replicaset -l app=unicorn -o jsonpath='{.items[0].metadata.name}')
  echo $rs
#+END_SRC

#+NAME: describe pod
#+BEGIN_SRC tmate :session br-right:misc
  pod=$(kubectl -n gitlab get pod -l app=unicorn -o jsonpath='{.items[0].metadata.name}')
  kubectl -n gitlab describe pod/$pod
#+END_SRC

#+NAME: init container broken
#+BEGIN_SRC shell :results verbatim :wrap src json
  pod=$(kubectl -n gitlab get pod -l app=unicorn -o jsonpath='{.items[0].metadata.name}')
  kubectl -n gitlab get pod $pod -o json | jq '.status.initContainerStatuses[] | select(.ready==false)'
#+END_SRC

#+RESULTS: init container broken
#+BEGIN_src json
{
  "containerID": "docker://406cd83379a83c744c2cc14aef13a45a2b02da8022ad804a84e0c19f9d0d694a",
  "image": "registry.gitlab.com/gitlab-org/build/cng/gitlab-unicorn-ee:v11.6.3",
  "imageID": "docker-pullable://registry.gitlab.com/gitlab-org/build/cng/gitlab-unicorn-ee@sha256:0cee129cb0e1517451dc9586223a6a5f85790b6432b8b268b51af769b03037d8",
  "lastState": {
    "terminated": {
      "containerID": "docker://406cd83379a83c744c2cc14aef13a45a2b02da8022ad804a84e0c19f9d0d694a",
      "exitCode": 1,
      "finishedAt": "2019-01-09T08:18:44Z",
      "reason": "Error",
      "startedAt": "2019-01-09T08:17:08Z"
    }
  },
  "name": "dependencies",
  "ready": false,
  "restartCount": 9,
  "state": {
    "waiting": {
      "message": "Back-off 5m0s restarting failed container=dependencies pod=gitlab-unicorn-7b86fc9749-gnbpn_gitlab(f6d55065-13e1-11e9-833a-ac162d770d60)",
      "reason": "CrashLoopBackOff"
    }
  }
}
#+END_src

#+NAME: container logs
#+BEGIN_SRC shell :results verbatim :wrap "SRC logs"
  pod=$(kubectl -n gitlab get pod -l app=unicorn -o jsonpath='{.items[0].metadata.name}')
  kubectl -n gitlab logs $pod -c dependencies
#+END_SRC

#+RESULTS: container logs
#+BEGIN_SRC logs
+ /scripts/set-config /var/opt/gitlab/templates /srv/gitlab/config
Begin parsing .erb files from /var/opt/gitlab/templates
Writing /srv/gitlab/config/database.yml
Writing /srv/gitlab/config/resque.yml
Writing /srv/gitlab/config/gitlab.yml
Copying other config files found in /var/opt/gitlab/templates
Copying unicorn.rb into /srv/gitlab/config
Copying smtp_settings.rb into /srv/gitlab/config
+ exec /scripts/wait-for-deps
Checking database connection and schema version
WARNING: This version of GitLab depends on gitlab-shell 8.4.3, but you're running Unknown. Please update gitlab-shell.
Database Schema
Current version: 20181204154019
Codebase version: 20181215161939
Checking database connection and schema version
WARNING: This version of GitLab depends on gitlab-shell 8.4.3, but you're running Unknown. Please update gitlab-shell.
Database Schema
Current version: 20181204154019
Codebase version: 20181215161939
Checking database connection and schema version
WARNING: This version of GitLab depends on gitlab-shell 8.4.3, but you're running Unknown. Please update gitlab-shell.
Database Schema
Current version: 20181204154019
Codebase version: 20181215161939
Checking database connection and schema version
WARNING: This version of GitLab depends on gitlab-shell 8.4.3, but you're running Unknown. Please update gitlab-shell.
Database Schema
Current version: 20181204154019
Codebase version: 20181215161939
Checking database connection and schema version
#+END_SRC

** See how they run

#+NAME: see how the run
#+BEGIN_SRC tmate :session br-right:misc
helm status gitlab
#+END_SRC

** Get root password

#+NAME: get root password
#+BEGIN_SRC tmate :session br-right:misc
kubectl get secret gitlab-gitlab-initial-root-password -ojsonpath={.data.password} | base64 --decode ; echo
#+END_SRC

** TODO SMTP OUTGOING
** TODO Setup Inbound Email
*** Setup SMTP Server
*** Configure GitLab to retrieve

* Footnotes
  
** isocket
*** Connecting the left pair / isocket

 ssh needs '-t' twice because it needs to be forced to allocate a remote terminal
 _even_ when we don't have have local one (within emacs)

#+NAME: left_session_create
#+BEGIN_SRC shell :var session="ii-left" terminal_exec="xterm -e" user="root" host="apisnoop.cncf.io" :session nil :results silent
  $terminal_exec \
      "ssh -att \
           -L /tmp/.$session.isocket:/tmp/.$session.isocket \
           -l $user \
           $host \
      tmate -S /tmp/.$session.isocket \
            new-session \
            -A \
            -s $session \
            -n emacs \
      emacs --fg-daemon=$session" \
  &
#+END_SRC

#+NAME: left_session_setup
#+BEGIN_SRC shell :var session="ii-left" user="root" host="apisnoop.cncf.io" :session nil :results silent
  ssh -att $user@$host \
  "tmate -S /tmp/.$session.isocket \
        new-window \
        -n editor" \
   "emacsclient -nw \
              --socket-name $session \
              ~/org/ii/legalhackers/gitlab.org"
#+END_SRC

**** Connecting to emacs daemon

 #+NAME: alse run emacsclient
 #+BEGIN_SRC tmate :noeval
 export SESSION=lt-emacs
 emacsclient --socket-name $SESSION
 #+END_SRC

*** Connecting the right pair / isocket

#+NAME: right_session_create
#+BEGIN_SRC shell :var session="ii-right" terminal_exec="xterm -e" user="root" host="apisnoop.cncf.io" :session nil :results silent
  $terminal_exec \
      "ssh -att \
           -L /tmp/.$session.isocket:/tmp/.$session.isocket \
           -l $user \
           $host \
      tmate -S /tmp/.$session.isocket \
            new-session \
            -A \
            -s $session \
            -n misc" \
  &
#+END_SRC


 #+NAME: right_session_join
 #+BEGIN_SRC shell :results silent
 export SESSION=api-snoop
 export XTERM_EXEC="roxterm -e"
 $XTERM_EXEC ssh -Att root@apisnoop.cncf.io \
  tmate -S /tmp/.$SESSION.isocket \
   at \; sleep 9999
 #+END_SRC

 #+NAME: right_session_setup
 #+BEGIN_SRC shell :results verbatim
 export SESSION=api-snoop
 echo ssh -tt root@apisnoop.cncf.io \
  tmate -S /tmp/.$SESSION.isocket \
    new-window -n session \
     bash
 #+END_SRC

 #+NAME: right_session
 #+BEGIN_SRC shell :cache yes :wrap "SRC text :noeval" :results verbatim
 export SESSION=api-snoop
 ssh -tt root@apisnoop.cncf.io \
  tmate -S /tmp/.$SESSION.isocket display -p \'#{tmate_ssh}\'
 #+END_SRC

 #+RESULTS[dd96525b42bbbe741e292e99ad5f3592a7163025]: right_session
 #+BEGIN_SRC text :noeval
 ssh mJrsCgvGTOTOFagYpBKvRf7EE@sf2.tmate.io
 #+END_SRC





 #+NAME: give this to your pair
 #+BEGIN_SRC bash :noweb yes :var left_session=left_session() right_session=right_session()
 echo "ii pair session ready
 left: $left_session
 right: $right_session
 "
 #+END_SRC

 #+RESULTS: give this to your pair
 | ii     | pair | session | ready |
 | left:  | nil  |         |       |
 | right: | nil  |         |       |
 |        |      |         |       |

*** TODO Sharing your eyes

#+NAME: give this to your pair
#+BEGIN_SRC bash :noweb yes :var left_session=left_session() :var right_session=right_session()
echo "ii pair session ready
left: $left_session
right: $right_session
"
#+END_SRC

# Local Variables:
# eval: (setq socket (concat "/tmp/" user-login-name "." (file-name-base buffer-file-name) ".iisocket"))
# org-babel-tmate-session-prefix: ""
# org-babel-tmate-default-window-name: "main"
# org-use-property-inheritance: t
# End:
