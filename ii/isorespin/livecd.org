#+TITLE: Remastering a LiveCD
#+AUTHOR: Hippie Hacker
#+AUTHOR: Stephen Heywood
#+AUTHOR: Zach Mandeville
#+EMAIL: hh@ii.coop
#+EMAIL: stephen@ii.coop
#+EMAIL: zz@ii.coop
#+CREATOR: ii.coop
#+DATE: 15th of January, 2019
#+PROPERTY: header-args:shell :results output code verbatim replace
#+PROPERTY: header-args:shell+ :dir (file-name-directory buffer-file-name)
#+PROPERTY: header-args:tmate  :socket (symbol-value 'socket)
#+PROPERTY: header-args:tmate+ :session (user-login-name)
#+STARTUP: showeverything

* Remastering a LiveCD

We want Angelica, Indigo, and others to be able to run a custom bootable ISO that meets there needs.

This is loosely based on: https://help.ubuntu.com/community/LiveCDCustomization

#+NAME: tmpdir
#+BEGIN_SRC shell :cache yes
  mktemp -d -p /run/shm/
#+END_SRC

#+RESULTS[8eefbb5971319be0bb9e92fc78292a7909956a8a]: tmpdir
#+BEGIN_SRC shell
/run/shm/tmp.pgd3i8WDm4
#+END_SRC

* Create base Docker Image from an ISO
  
** Prerequisites

You'll need to have an ubuntu based ISO, be sure and set the ISO variable.

#+NAME: prereqs
#+BEGIN_SRC shell
sudo apt-get install squashfs-tools genisoimage p7zip-full
#+END_SRC

** extract content from ISO
   
#+NAME: iteration loop
#+BEGIN_SRC shell :noweb yes :var tmpdir=tmpdir()
  mkdir -p $tmpdir
  ISO=ubuntu-18.04.1-desktop-amd64.iso 
  7z x -o$tmpdir/cd $ISO
#+END_SRC

#+RESULTS: iteration loop
#+BEGIN_SRC shell

7-Zip [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=en_US.UTF-8,Utf16=on,HugeFiles=on,64 bits,8 CPUs Intel(R) Xeon(R) CPU E3-1505M v5 @ 2.80GHz (506E3),ASM,AES-NI)

Scanning the drive for archives:
1 file, 1953349632 bytes (1863 MiB)

Extracting archive: ubuntu-18.04.1-desktop-amd64.iso

WARNINGS:
There are data after the end of archive

--
Path = ubuntu-18.04.1-desktop-amd64.iso
Type = Iso
WARNINGS:
There are data after the end of archive
Physical Size = 1951834112
Tail Size = 1515520
Created = 2018-07-25 16:21:56
Modified = 2018-07-25 16:21:56

Everything is Ok

Archives with Warnings: 1

Warnings: 1
Folders: 60
Files: 614
Size:       1953066055
Compressed: 1953349632
#+END_SRC


** inspect the Squashfs File
#+NAME list cd
#+BEGIN_SRC shell :noweb yes :var tmpdir=tmpdir()
  ls -lah $tmpdir/cd/casper/filesystem.squashfs
  file $tmpdir/cd/casper/filesystem.squashfs
  df -H | grep sh
#+END_SRC

#+RESULTS:
#+BEGIN_SRC shell
-rw-r--r-- 1 hh hh 1.8G Jul 25 15:19 nil/cd/casper/filesystem.squashfs
nil/cd/casper/filesystem.squashfs: Squashfs filesystem, little endian, version 4.0, 1864448527 bytes, 157082 inodes, blocksize: 131072 bytes, created: Wed Jul 25 03:17:19 2018
tmpfs               34G  488M   34G   2% /dev/shm
#+END_SRC

** Extract / verify the Squashfs

#+NAME extract squashfs
#+BEGIN_SRC tmate
  sudo unsquashfs -d edit cd/casper/filesystem.squashfs
#+END_SRC

#+NAME inspect editable extraction
#+BEGIN_SRC shell
  sudo ls -la edit/bin/bash
#+END_SRC

#+RESULTS:
: -rwxr-xr-x 1 root root 1113504 Apr  5  2018 edit/bin/bash

** import extraction into docker

#+NAME list cd
#+BEGIN_SRC tmate
  sudo tar -C edit -c -f - .  | docker import - $ISO
#+END_SRC

* Verify base Docker Image 

#+NAME: check docker image
#+BEGIN_SRC shell
docker images | grep ubuntu-18.04.1-desktop-amd64.iso
#+END_SRC

#+RESULTS: check docker image
: ubuntu-18.04.1-desktop-amd64.iso   latest              6ff56c22bba8        5 minutes ago       4.31GB

#+NAME: verify container works
#+BEGIN_SRC shell
docker run -i ubuntu-18.04.1-desktop-amd64.iso lsb_release -a
#+END_SRC

#+RESULTS: verify container works
: Distributor ID:	Ubuntu
: Description:	Ubuntu 18.04.1 LTS
: Release:	18.04
: Codename:	bionic

* Customize Base Docker Image
** Examples for poking around
   
#+BEGIN_SRC tmate
docker run -ti $ISO /bin/bash -l
#+END_SRC

#+NAME: inspect installed packages, sort by size
#+BEGIN_SRC tmate
dpkg-query -W --showformat='${Installed-Size}\t${Package}\n' | sort -nr | less
#+END_SRC

#+NAME: purg a few packages we dont want
#+BEGIN_SRC tmate
aptitude purge package-name
#+END_SRC

#+NAME: locals
#+BEGIN_SRC tmate
locale-gen --purge en_US.UTF-8 
#+END_SRC

** Dockerfile
   :PROPERTIES:
   :header-args: dockerfile  :tangle docker-file/Dockerfile
   :END:

Ensure en_US.UTF-8 everywhere, for now
Enable universe so jq, tmate, silvesearcher-ag...
 
#+NAME: Angelinux Dockerfile
#+BEGIN_SRC dockerfile
  FROM ubuntu-18.04.1-desktop-amd64.iso 
  RUN locale-gen --purge en_US.UTF-8 \
    && sed -i s:restricted:restricted\ universe: /etc/apt/sources.list \
    && apt-get update \
    && apt-get install -y \
    apt-file \
    apt-transport-https \
    aptitude \
    awesome \
    autoconf \
    build-essential \
    byzanz \
    ca-certificates \
    debian-goodies \
    curl \
    figlet \
    git \
    gpg \
    gtk-redshift \
    htop \
    jq \
    kvmtool \
    locales \
    lolcat \
    macchanger \
    nmap \
    pass \
    qemu-kvm \
    sakura \
    silversearcher-ag \
    software-properties-common \
    strace \
    sudo \
    texinfo \
    thunar \
    tig \
    tmate \
    tmux \
    tshark \
    unzip \
    whois \
    wireshark \
    vlc \
    xfonts-terminus \
    xfonts-terminus-dos \
    xfonts-terminus-oblique \
    zfs-dkms \
    zfs-initramfs \
    zfsutils-linux \
    zip
#+END_SRC

*** Kubernetes 

#+NAME: Openscad
#+BEGIN_SRC dockerfile
  RUN apt-key adv \
    --recv-keys x \
    && add-apt-repository \
    ppa:openscad/releases \
    && apt-get install -y \
    openscad
#+END_SRC

#+NAME: Kubernetes
#+BEGIN_SRC dockerfile
RUN apt-key adv \
  --keyserver keyserver.ubuntu.com \
  --recv-keys 6A030B21BA07F4FB \
  && add-apt-repository \
  "deb http://apt.kubernetes.io/ kubernetes-xenial main" \
  && apt-get install -y \
  kubelet kubeadm kubectl
#+END_SRC

*** Google Cloud SDK

https://cloud.google.com/sdk/docs/quickstart-debian-ubuntu

Uses the same apt-key as kubernetes.

#+NAME: Google SDK
#+BEGIN_SRC dockerfile
RUN add-apt-repository \
  "deb http://packages.cloud.google.com/apt cloud-sdk-bionic main" \
  && apt-get install -y \
  google-cloud-sdk
#+END_SRC

*** Docker

#+NAME: Docker
#+BEGIN_SRC dockerfile
RUN apt-key adv \
  --recv-keys 9DC858229FC7DD38854AE2D88D81803C0EBFCD88 \
  && add-apt-repository \
  "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable" \
  && apt-get install -y \
  docker-ce
#+END_SRC

*** Emacs

https://launchpad.net/~ubuntu-elisp/+archive/ubuntu/ppa

#+NAME: Emacs
#+BEGIN_SRC dockerfile
RUN apt-key adv \
  --recv-keys 0D7BAE435ADBC6C3E4918A74062D648FD62FCE72 \
  && add-apt-repository \
  "deb http://ppa.launchpad.net/ubuntu-elisp/ppa/ubuntu bionic main" \
  && apt-get install -y \
  emacs-snapshot
#+END_SRC

*** Go

 https://golang.org/doc/install#install
 https://github.com/golang/go/wiki/Ubuntu

#+NAME: go
#+BEGIN_SRC dockerfile
RUN apt-key adv \
  --recv-keys 52B59B1571A79DBC054901C0F6BC817356A3D45E \
  && add-apt-repository \
  "deb http://ppa.launchpad.net/longsleep/golang-backports/ubuntu bionic main" \
  && apt-get install -y \
  golang-1.11 \
  && echo \'export PATH=$PATH:$HOME/go/bin\' \
     > /etc/profile.d/homedir-go-path.sh
  && echo \'export PATH=/usr/lib/go-1.11/bin:$PATH\' \
     > /etc/profile.d/system-go-path.sh
#+END_SRC

*** kind

#+NAME: kind
#+BEGIN_SRC dockerfile
RUN . /etc/profile.d/*go-path.sh \
  && mkdir /etc/skel/go \
  && ln -s /etc/skel/go /root/go \
  && go get sigs.k8s.io/kind
#+END_SRC

*** helm

#+NAME helm
#+BEGIN_SRC dockerfile
RUN curl -L \
  https://storage.googleapis.com/kubernetes-helm/helm-v2.12.2-linux-amd64.tar.gz \
  | tar xvz -f - --strip-components 1 -C /usr/local/bin linux-amd64/helm linux-amd64/tiller
#+END_SRC

*** NodeJS

    Take a look at nvm instead: https://github.com/creationix/nvm 
    
    A node version manager, which ends up being an easier way to install node,
    switch between versions of it as needed, and get npm included
    
 https://github.com/nodesource/distributions/blob/master/README.md#debinstall

#+NAME: node.tpl
#+BEGIN_SRC dockerfile
RUN apt-key adv \
  --recv-keys 9FD3B784BC1C6FC31A8A0A1C1655A0AB68576280 \
  && add-apt-repository \
  "deb https://deb.nodesource.com/node_11.x bionic main" \
  && apt-get install -y \
  nodejs
#+END_SRC

*** Bazel

 https://docs.bazel.build/versions/master/install-ubuntu.html#install-on-ubuntu

We install oracle-java8, so we should be good.
I'm unsure which ubuntu ppa we should be using.

# #+NAME: openjdk-8-jdk.tpl
# #+BEGIN_SRC dockerfile
# RUN apt-key adv \
#    --keyserver keyserver.ubuntu.com \
#    --recv-keys DA1A4A13543B466853BAF164EB9B1D8886F44E2A \
#   && add-apt-repository \
#   "deb http://ppa.launchpad.net/openjdk-r/ppa/ubuntu trusty main" \
#   && apt-get install -y openjdk-8-jdk
# #+END_SRC

#+NAME: bazel.tpl
#+BEGIN_SRC dockerfile
RUN apt-key adv \
  --recv-keys 48457EE0 \
  && add-apt-repository \
  "deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8" \
  && apt-get install -y \
  bazel
#+END_SRC

*** Google Chrome

 https://dl-ssl.google.com/linux/linux_signing_key.pub

#+NAME: chrome
#+BEGIN_SRC dockerfile
RUN apt-key adv \
  --recv-keys EB4C1BFD4F042F6DDDCCEC917721F63BD38B4796 \
  && add-apt-repository \
  "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" \
  && apt-get install -y \
  google-chrome-stable
#+END_SRC

*** Fish Shell

 Devan says this is the bomb, and I believe him

#+NAME: fish
#+BEGIN_SRC dockerfile
RUN apt-key adv \
  --recv-keys 59FDA1CE1B84B3FAD89366C027557F056DC33CA5 \
  && add-apt-repository \
  "deb http://ppa.launchpad.net/fish-shell/release-3/ubuntu bionic main" \
  && apt-get install -y \
  fish
#+END_SRC

*** Zoom

#+NAME: Zoom
#+BEGIN_SRC dockerfile
RUN apt-key adv \
   --recv-keys 396060CADD8A75220BFCB369B903BF1861A7C71D \
  && curl -L -o /tmp/zoom.deb \
     https://zoom.us/client/latest/zoom_amd64.deb \
  && dpkg -i /tmp/zoom.deb \
  && rm /tmp/zoom.deb
#+END_SRC

*** Google Talk Plugin

#+NAME: google-talkplugin.tpl
#+BEGIN_SRC dockerfile :tangle no
RUN add-apt-repository \
  "deb http://dl.google.com/linux/talkplugin/deb/ stable main" \
  && apt-get install -y \
  google-talkplugin
#+END_SRC

*** Spotify

This is bad, provide alternatives soon!
Artist are starving!

#+NAME: spotify.tpl
#+BEGIN_SRC dockerfile
RUN apt-key adv \
  --recv-keys 931FF8E79F0876134EDDBDCCA87FF9DF48BF1C90 \
  && add-apt-repository \
  "deb http://repository.spotify.com stable non-free" \
  && apt-get install -y \
  spotify-client
#+END_SRC

*** Signal

#+NAME: signal.tpl
#+BEGIN_SRC dockerfile
RUN apt-key adv \
  --recv-keys DBA36B5181D0C816F630E889D980A17457F6FB06 \
  && add-apt-repository \
  "deb [arch=amd64] https://updates.signal.org/desktop/apt xenial main" \
  && apt-get install -y \
  signal-desktop
 #+END_SRC

*** Skype

Skype does bad things. Don't actually run it, just leave it on disk for now.

#+NAME: skype.tpl
#+BEGIN_SRC dockerfile
RUN apt-key adv \
  --recv-keys D4040146BE3972509FD57FC71F3045A5DF7587C3 \
  && add-apt-repository \
  "deb [arch=amd64] https://repo.skype.com/deb stable main" \
  && apt-get install -y \
  skypeforlinux
#+END_SRC

*** Oracle Java 8

 We need this to access our old DL380P systems iLO (Integrated Lights Out / Virtual Console)

#+NAME: oracle-java8.tpl
#+BEGIN_SRC dockerfile
RUN apt-key adv \
  --recv-keys 7B2C3B0889BF5709A105D03AC2518248EEA14886 \
  && add-apt-repository \
  "http://ppa.launchpad.net/webupd8team/java/ubuntu bionic main " \
  && apt-get install -y \
  oracle-java8-installer
#+END_SRC

*** Virtualbox

#+NAME: virtualbox.tpl
#+BEGIN_SRC dockerfile
RUN apt-key adv \
  --recv-keys B9F8D658297AF3EFC18D5CDFA2F683C52980AECF \
  && add-apt-repository \
  "deb http://download.virtualbox.org/virtualbox/debian bionic contrib" \
  && apt-get install -y \
  virtualbox-6.0
#+END_SRC

*** Configuring Emacs in /etc/skel

We use spacemacs, and it takes a while to download / configure / compile all the
lisp files.

One of the larger components that is much faster to have local is our elpa-mirror.

#+NAME: configure-elpa-mirror
#+BEGIN_SRC dockerfile
RUN git clone --depth 1 -b stable \
    https://github.com/ii/elpa-mirror \
    /usr/local/elpa-mirror \
#+END_SRC

Here we attempt to put our config into /etc/skel

/etc/skel/.emacs.d and /etc/skel/.spacemacs will be copied to all new users
$HOME

#+NAME: configure-emacs
#+BEGIN_SRC dockerfile
RUN git clone --depth 1 -b stable \
    https://github.com/ii/spacemacs.git \
    /etc/skel/.emacs.d \
  && git clone --depth 1 \
    https://gitlab.ii.coop/ii/tooling/ob-tmate.git \
    /etc/skel/.emacs.d/private/local/ob-tmate.el \
  && git clone --depth 1 \
    https://gitlab.ii.coop/ii/tooling/dot-spacemacs.git \
    /etc/skel/.emacs.d/private/local/dot-spacemacs \
  && ln -s .emacs.d/private/local/dot-spacemacs/.spacemacs /etc/skel/.spacemacs \
  && ln -sf .emacs.d/private/local/dot-spacemacs/.lock /etc/skel/.emacs.d/.lock
#+END_SRC

On first start, emacs will want to compile all our elisp files. Instead we copy
symlink from root, and compile everything via a batch run of init.el, then
remove the symlink.

This means startup time for the user will be greatly reduced.
The S.gpg-agent.* files are sockets, and don't work well being in /etc/skel.

#+BEGIN_EXAMPLE
Copying files from `/etc/skel' ...
Stopped: Cannot deal with /etc/skel/./.emacs.d/elpa/gnupg/S.gpg-agent.ssh.
It is not a dir, file, or symlink.
#+END_EXAMPLE

#+NAME: compile-elisp
#+BEGIN_SRC dockerfile
RUN  ln -sf /etc/skel/.emacs.d /root/.emacs.d \
  && ln -sf .emacs.d/private/local/dot-spacemacs/.spacemacs /root/.spacemacs \
  && emacs --batch -l ~/.emacs.d/init.el \
  && rm /root/.emacs.d /root/.spacemacs \
  && rm /etc/skel/.emacs.d/elpa/gnupg/S.gpg-agent*
#+END_SRC

** Stuff that's broken, due to gconf and friends not being installable
   :PROPERTIES:
   :header-args: :tangle no
   :END:
*** Microsoft Surface Kernel

 #+NAME: linux-surface kernel
 #+BEGIN_SRC shell :tangle linux-surface.sh :tangle-mode (identity #o755)
   git clone --depth 1 https://github.com/jakeday/linux-surface.git ~/linux-surface
   cd ~/linux-surface
   sh setup.sh
 #+END_SRC

 #+NAME: surface.tpl
 #+BEGIN_SRC shell :tangle surface.tpl
   -f linux-surface.sh \
   -c linux-surface.sh
 #+END_SRC

*** AMD GPU Binaries

 We need this for our stubborn AMD Systems at the iimaginarium.
 However I don't think this kernel is getting installed as the one booting the ISO yet.

 https://github.com/M-Bab/linux-kernel-amdgpu-binaries

 #+NAME: amd radion
 #+BEGIN_SRC shell :tangle amd-gpu.sh :tangle-mode (identity #o755)
   mkdir -p /tmp/amd
   cd /tmp/amd
   wget https://github.com/M-Bab/linux-kernel-amdgpu-binaries/raw/53819982954987ddde463c9354608655cf1ba211/firmware-radeon-ucode_2.40_all.deb
   wget https://github.com/M-Bab/linux-kernel-amdgpu-binaries/raw/53819982954987ddde463c9354608655cf1ba211/linux-headers-4.19.6_18.12.04.amdgpu.ubuntu_amd64.deb
   wget https://github.com/M-Bab/linux-kernel-amdgpu-binaries/raw/53819982954987ddde463c9354608655cf1ba211/linux-image-4.19.6_18.12.04.amdgpu.ubuntu_amd64.deb
   dpkg -i *deb
   cd -
   rm -rf /tmp/amd
 #+END_SRC

 #+NAME: amd-gpu.tpl
 #+BEGIN_SRC shell :tangle amd-gpu.tpl
   -f amd-gpu.sh \
   -c amd-gpu.sh
 #+END_SRC

* Create Squashfs from Docker Image

#+NAME create directory from docker image
#+BEGIN_SRC tmate noweb: yes
  cd ~/ii/org/ii/isorespin/t
  ISO=ubuntu-18.04.1-desktop-amd64.iso 
  <<shm_tmpdir>>
  docker save $ISO > $outputdir/$ISO.image.tar
  #| sudo tar -C update -x -f - . 
#+END_SRC

#+NAME squash that fs
#+BEGIN_SRC tmate
  cd $outputdir
  docker rm $ISO
  sudo rm -rf output
  docker run --name $ISO $ISO lsb_release -a
  mkdir output
  docker export $ISO | sudo tar xCf output -
  sudo mksquashfs output filesystem.squashfs -comp xz -b 1048576
  echo "$(sudo du -sx --block-size=1 output | cut -f1)" | sudo tee > filesystem.size
#+END_SRC

* Update / Finalize the ISO
* Testing the ISO
* TODOS
** TODO setup squid to cache everything http / https via transparent proxy

# Local Variables:
# eval: (setq socket (concat "/tmp/" user-login-name "." (file-name-base buffer-file-name) ".iisocket"))
# org-babel-tmate-session-prefix: ""
# org-babel-tmate-default-window-name: "main"
# org-use-property-inheritance: t
# End:
