#+TITLE: Setting up Kind
#+AUTHOR: Hippie Hacker and Stephen Heywood
#+EMAIL: hh@ii.coop and stephen@ii.coop
#+CREATOR: ii.coop
#+DATE: 22nd of November, 2018
#+PROPERTY: header-args:shell :results output list raw replace
#+PROPERTY: header-args:tmate  :socket (symbol-value 'socket)
#+PROPERTY: header-args:tmate+ :session (user-login-name)

* Preparing to use Kind
:PROPERTIES:
:header-args:tmate+: :session lh-right:misc
:END:

** Setup tmate

Run this block and then run in a terminal:

#+NAME: connect
#+BEGIN_SRC shell :noeval t
tmate -S /tmp/.lh-right.isocket 
#+END_SRC

We'll forward local port 8001 to our remote to bring up dashboard and friends:

#+NAME: connect to the box we want to manage
#+BEGIN_SRC tmate
ssh -L 8001:localhost:8001 -p 22111 sysadmin@rc.heyste.net
#+END_SRC

This was attempted on a Ubuntu Bionic 18.04 install directly on local hardware.

** Requirements

Passwordingless sudo for the duration of the setup if you want to copy / paste / tmate.


Starting at https://github.com/kubernetes-sigs/kind

*** Install go:
#+BEGIN_SRC tmate
  # https://golang.org/doc/install#install
  curl -L https://dl.google.com/go/go1.11.2.linux-amd64.tar.gz | sudo tar -C /usr/local -xzf -
  echo 'export PATH=$PATH:/usr/local/go/bin' | sudo tee /etc/profile.d/usr-local-go-path.sh
  echo 'export PATH=$PATH:$HOME/go/bin' | sudo tee /etc/profile.d/homedir-go-path.sh
  . /etc/profile.d/usr-local-go-path.sh
  . /etc/profile.d/homedir-go-path.sh
#+END_SRC

*** Install docker:
#+BEGIN_SRC tmate
# https://docs.docker.com/install/linux/docker-ce/debian/#set-up-the-repository
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/debian \
   $(lsb_release -cs) \
   stable"
apt-get update
apt-get install -y docker-ce
systemctl start docker
systemctl enable docker
#+END_SRC

** Build kind and create cluster
#+BEGIN_SRC tmate
  go get sigs.k8s.io/kind
#+END_SRC

#+BEGIN_SRC tmate
kind create cluster
#+END_SRC

#+BEGIN_SRC tmate
export KUBECONFIG="$(kind get kubeconfig-path)"
kubectl cluster-info
#+END_SRC
** When using a remote box, forwarding ports for kube webui

For a simple starter, let's just deploy the kubernetes dashboard.

#+NAME: deploy dashboard
#+BEGIN_SRC tmate
kubectl create -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml
#+END_SRC

We forwarded our local 8001 to the remote 8001, so we should be able to visit 
[[http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/]]
However we won't be able to authenicate yet.

#+NAME: setup proxy for port 8001
#+BEGIN_SRC tmate
kubectl proxy &
#+END_SRC


To authenticate let's follow the directions for creating a sample user for the dashboand:
[[https://github.com/kubernetes/dashboard/wiki/Creating-sample-user]]

#+NAME: create service account
#+BEGIN_SRC tmate
    cat <<-EOF | kubectl apply -f -
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: admin-user
        namespace: kube-system
    EOF
#+END_SRC
#+NAME: create service account
#+BEGIN_SRC tmate
    cat <<-EOF | kubectl apply -f -
      apiVersion: rbac.authorization.k8s.io/v1beta1
      kind: ClusterRoleBinding
      metadata:
        name: admin-user
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: cluster-admin
      subjects:
      - kind: ServiceAccount
        name: admin-user
        namespace: kube-system
    EOF
#+END_SRC

#+NAME: create service account
#+BEGIN_SRC tmate
kubectl get -n kube-system -o json secret \
  `kubectl get secret -n kube-system | grep admin-user | awk '{print $1}'` \
  | jq -r .data.token \
  | base64 --decode
#+END_SRC

Take the output from the above command and visit
[[http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/]]
Choose Token as your authentication method and paste in the output from above.

Beware your copy paste methods and try pasting into a notepad first.

* Footnotes
  
# Local Variables:
# eval: (setq socket (concat "/tmp/" user-login-name "." (file-name-base buffer-file-name) ".iisocket"))
# org-babel-tmate-session-prefix: ""
# org-babel-tmate-default-window-name: "main"
# org-use-property-inheritance: t
# End:
