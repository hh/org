#+TITLE: #wg-k8s-infra cloud-shell
#+AUTHOR: Hippie Hacker
#+EMAIL: hh@ii.coop
#+CREATOR: ii.coop
#+DATE: 8th of March, 2019
#+PROPERTY: header-args:shell :results output code verbatim replace
#+PROPERTY: header-args:shell+ :wrap "EXAMPLE :noeval t"
#+PROPERTY: header-args:shell+ :eval no-export
#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/
#+STARTUP: content

* Cooperating on Open Infrastructure

Google has gratiously donated quite a bit of cloud infra to the CNCF to assist
with the curation and continuous integration of the kubernetes community.

Currently most of the infrastructure is maintained internally by folks who work
at Google. It benefits us all if we can, as a community, learn to support
ourselves. It is an amplifier if we do so in such a transparent way that other
communities can learn to do the same.

ii would like to jumpstart a culture of pairing on the code and infrastructure used
within the CNCF and kubernetes communites.

In order for this to happen, we need some simple infrastructure that anyone can
easily use to share a working session with someone, preferable recording those
sessions.

** gcloud alpha cloud-shell

- [[https://cloud.google.com/sdk/gcloud/reference/alpha/cloud-shell/]]
- [[https://cloud.google.com/shell/docs/features#command-line_access]] 

* #wg-k8s-infra Cloud Shell Environment
  
- [[https://cloud.google.com/shell/docs/features#custom_cloud_shell_environment]]  
- https://console.cloud.google.com/cloudshell/environment/view

** Dockerfile
   :PROPERTIES:
   :header-args: dockerfile  :tangle Dockerfile :comments org
   :END:

#+NAME: start from the base Google Cloud-Shell
#+BEGIN_SRC dockerfile
  FROM gcr.io/cloudshell-images/cloudshell:cloud-shell-v20190304
#+END_SRC
*** Base Software
 
#+NAME: wg-k8s-infra Dockerfile
#+BEGIN_SRC dockerfile
  RUN locale-gen --purge en_US.UTF-8 \
    && apt-get update \
    && DEBIAN_FRONTEND=noninteractive apt-get install -yq \
    apt-file \
    aptitude \
    debian-goodies \
    figlet \
    gnupg \
    libgnutls28-dev \
    lolcat \
    nmap \
    pass \
    silversearcher-ag \
    texinfo \
    tmate \
    tshark \
    xclip
#+END_SRC

*** Update Kubectl

#+NAME: Kubernetes
#+BEGIN_SRC dockerfile
RUN apt-key adv \
  --keyserver keyserver.ubuntu.com \
  --recv-keys 6A030B21BA07F4FB \
  && add-apt-repository \
  "deb http://apt.kubernetes.io/ kubernetes-stretch main" \
  && apt-get update \
  && apt-get install -qy \
  kubectl
#+END_SRC

*** Google Cloud SDK

https://cloud.google.com/sdk/docs/quickstart-debian-ubuntu

Uses the same apt-key as kubernetes.

#+NAME: Google SDK
#+BEGIN_SRC dockerfile
RUN add-apt-repository \
  "deb http://packages.cloud.google.com/apt cloud-sdk-stretch main" \
  && apt-get update \
  && apt-get install -y \
  google-cloud-sdk
#+END_SRC

*** Emacs

ii emacs+spacemacs+tmate requires our pinned/stable versions
- elpa-mirror
- emacs
- spacemacs

#+NAME: Remove emacs24
#+BEGIN_SRC dockerfile
RUN apt purge -yq \
  emacs24-bin-common \
  emacs24-common \
  emacs24-nox \
  emacs-nox \
  emacsen-common
#+END_SRC

#+NAME: configure-elpa-mirror
#+BEGIN_SRC dockerfile
RUN git clone --depth 1 -b stable \
    https://github.com/ii/elpa-mirror \
    /usr/local/elpa-mirror
#+END_SRC

#+NAME: configure-elpa-mirror
#+BEGIN_SRC dockerfile
RUN curl -L \
  https://storage.googleapis.com/apisnoop/ii-emacs.tgz \
  | tar xvz -f - -C / \
  && ln -s /usr/local/emacs/bin/* /usr/local/bin
#+END_SRC

**** don't compile for now
#+NAME: checkout emacs src
#+BEGIN_SRC dockerfile :tangle no
RUN git clone --depth 1 -b stable \
    https://github.com/ii/emacs \
    /usr/local/src/emacs
#+END_SRC

#+NAME: compile emacs
#+BEGIN_SRC dockerfile :tangle no
RUN cd /usr/local/src/emacs \
    && ./autogen.sh \
    && ./configure --prefix=/usr/local \
    && make -j $(nproc) install
#+END_SRC

***** randomized memory locations prevent emacs from building

We'll likely be unable to use cloud build services (that are containerized).
This is due to the way that the lisp state machine (in memory) is probed when the desired final state is reached.
The probing allows this state to be saved directly to the 'emacs' binary itself...

- https://stackoverflow.com/questions/37544423/how-to-build-emacs-from-source-in-docker-hub-gap-between-bss-and-heap
- https://debbugs.gnu.org/cgi/bugreport.cgi?bug=23529

#+BEGIN_EXAMPLE
Dumping under the name emacs
**************************************************
Warning: Your system has a gap between BSS and the
heap (32861823 bytes).  This usually means that exec-shield
or something similar is in effect.  The dump may
fail because of this.  See the section about
exec-shield in etc/PROBLEMS for more information.
**************************************************
20758176 of 33554432 static heap bytes used
Makefile:749: recipe for target 'bootstrap-emacs' failed
make[1]: *** [bootstrap-emacs] Segmentation fault (core dumped)
make[1]: Leaving directory '/usr/local/src/emacs/src'
#+END_EXAMPLE

Will likely require building with ~echo 0 > /proc/sys/kernel/randomize_va_space; docker build .~

*** kind

#+NAME: kind
#+BEGIN_SRC dockerfile
#RUN go get sigs.k8s.io/kind && cp /root/gopath/bin/kind /usr/local/bin
#+END_SRC

*** helm

#+NAME helm
#+BEGIN_SRC dockerfile
RUN curl -L \
  https://storage.googleapis.com/kubernetes-helm/helm-v2.13.0-linux-amd64.tar.gz \
  | tar xvz -f - --strip-components 1 -C /usr/local/bin linux-amd64/helm linux-amd64/tiller
#+END_SRC

*** Configuring Emacs in /etc/skel

We use spacemacs, and it takes a while to download / configure / compile all the
lisp files.

One of the larger components that is much faster to have local is our elpa-mirror.

Here we attempt to put our config into /etc/skel

/etc/skel/.emacs.d and /etc/skel/.spacemacs will be copied to all new users
$HOME

#+NAME: configure-emacs
#+BEGIN_SRC dockerfile
RUN git clone --depth 1 -b stable --recurse-submodules \
    https://github.com/ii/spacemacs.git \
    /etc/skel/.emacs.d \
  && ln -s .emacs.d/private/local/dot-spacemacs/.spacemacs /etc/skel/.spacemacs
#+END_SRC

On first start, emacs will want to compile all our elisp files. Instead we copy
symlink from root, and compile everything via a batch run of init.el, then
remove the symlink.

This means startup time for the user will be greatly reduced.
The S.gpg-agent.* files are sockets, and don't work well being in /etc/skel.

#+BEGIN_EXAMPLE
Copying files from `/etc/skel' ...
Stopped: Cannot deal with /etc/skel/./.emacs.d/elpa/gnupg/S.gpg-agent.ssh.
It is not a dir, file, or symlink.
#+END_EXAMPLE

#+NAME: compile-elisp
#+BEGIN_SRC dockerfile
RUN  ln -sf /etc/skel/.emacs.d /root/.emacs.d \
  && ln -sf .emacs.d/private/local/dot-spacemacs/.spacemacs /root/.spacemacs \
  && emacs --batch -l ~/.emacs.d/init.el \
  && rm /root/.emacs.d /root/.spacemacs \
  && rm /etc/skel/.emacs.d/elpa/gnupg/S.gpg-agent*
#+END_SRC

* Footnotes

Some of these layers are 2GB, and quite a few are over 1GB.

# Local Variables:
# eval: (set (make-local-variable 'ssh-user-host) "root@139.178.88.146")
# eval: (set (make-local-variable 'org-file-dir) (file-name-directory buffer-file-name))
# eval: (set (make-local-variable 'user-buffer) (concat user-login-name "." (file-name-base buffer-file-name)))
# eval: (set (make-local-variable 'tmpdir) (make-temp-file (concat "/dev/shm/" user-buffer "-") t))
# eval: (set (make-local-variable 'socket) (concat "/tmp/" user-buffer ".iisocket"))
# eval: (set (make-local-variable 'select-enable-clipboard) t)
# eval: (set (make-local-variable 'select-enable-primary) t)
# eval: (set (make-local-variable 'start-tmate-command) (concat "tmate -S " socket " new-session -A -s " user-login-name " -n main \\\"tmate wait tmate-ready \\&\\& sleep 2 \\&\\& tmate display -p \'\\\#{tmate_ssh}\\ \\\\#\\ " user-buffer "\\ \\\\#\\ \\\#{tmate_web}\' \\| xclip -i -sel p -f \\| xclip -i -sel c \\&\\& bash --login\\\""))
# eval: (xclip-mode 1) 
# eval: (gui-select-text (concat "rm -i " socket "; ssh -tAX " ssh-user-host " -L " socket ":" socket " " start-tmate-command))
# eval: (xclip-mode 1) 
# org-babel-tmate-session-prefix: ""
# org-babel-tmate-default-window-name: "main"
# org-use-property-inheritance: t
# End:
